Submitting changes (commit: f3c2a51)...

[31mOur test runners might be experiencing downtime: https://status.codecrafters.io[0m

Running tests. Logs should appear shortly...

[33m[compile][0m Moved ./.codecrafters/run.sh → ./your_program.sh
[33m[compile][0m [32mCompilation successful.[0m

Debug = true

[33m[tester::#NE3] [0m[94mRunning tests for Stage #NE3 (Control Flow - If statements)[0m
[33m[tester::#NE3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#NE3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#NE3] [test-1.lox] [0m[33m// This should print the string if the condition[0m
[33m[tester::#NE3] [test-1.lox] [0m[33m// evaluates to True[0m
[33m[tester::#NE3] [test-1.lox] [0mif (false) print "baz";
[33m[tester::#NE3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[tester::#NE3] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#NE3] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#NE3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#NE3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#NE3] [test-2.lox] [0m[33m// This should print "block body" if the condition[0m
[33m[tester::#NE3] [test-2.lox] [0m[33m// evaluates to True[0m
[33m[tester::#NE3] [test-2.lox] [0mif (true) {
[33m[tester::#NE3] [test-2.lox] [0m  print "block body";
[33m[tester::#NE3] [test-2.lox] [0m}
[33m[tester::#NE3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mblock body
[33m[tester::#NE3] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#NE3] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#NE3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#NE3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// This program tests whether the assignment[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// operation returns the value assigned.[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// The if condition should evaluate to true and[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// the inner boolean expression must be printed.[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// So, in this case the if condition evaluates to[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m//true and prints the inner boolean expression[0m
[33m[tester::#NE3] [test-3.lox] [0mvar a = false;
[33m[tester::#NE3] [test-3.lox] [0mif (a = true) {
[33m[tester::#NE3] [test-3.lox] [0m  print (a == false);
[33m[tester::#NE3] [test-3.lox] [0m}
[33m[tester::#NE3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfalse
[33m[tester::#NE3] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#NE3] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#NE3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#NE3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#NE3] [test-4.lox] [0m[33m// This program should print a different string[0m
[33m[tester::#NE3] [test-4.lox] [0m[33m// based on the value of age[0m
[33m[tester::#NE3] [test-4.lox] [0mvar stage = "unknown";
[33m[tester::#NE3] [test-4.lox] [0mvar age = 90;
[33m[tester::#NE3] [test-4.lox] [0mif (age < 18) { stage = "child"; }
[33m[tester::#NE3] [test-4.lox] [0mif (age >= 18) { stage = "adult"; }
[33m[tester::#NE3] [test-4.lox] [0mprint stage;
[33m[tester::#NE3] [test-4.lox] [0m
[33m[tester::#NE3] [test-4.lox] [0mvar isAdult = age >= 18;
[33m[tester::#NE3] [test-4.lox] [0mif (isAdult) { print "eligible for voting"; }
[33m[tester::#NE3] [test-4.lox] [0mif (!isAdult) { print "not eligible for voting"; }
[33m[tester::#NE3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0madult
[33m[your_program] [0meligible for voting
[33m[tester::#NE3] [test-4] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#NE3] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#NE3] [0m[92mTest passed.[0m

[33m[tester::#FB4] [0m[94mRunning tests for Stage #FB4 (Statements & State - Scopes)[0m
[33m[tester::#FB4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#FB4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FB4] [test-1.lox] [0mvar quz = (12 * 48) - 18;
[33m[tester::#FB4] [test-1.lox] [0m{
[33m[tester::#FB4] [test-1.lox] [0m    [33m// Local scope should be created[0m
[33m[tester::#FB4] [test-1.lox] [0m    var hello = "foo" + "81";
[33m[tester::#FB4] [test-1.lox] [0m    print hello;
[33m[tester::#FB4] [test-1.lox] [0m}
[33m[tester::#FB4] [test-1.lox] [0mprint quz;
[33m[tester::#FB4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfoo81
[33m[your_program] [0m558
[33m[tester::#FB4] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#FB4] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FB4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#FB4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FB4] [test-2.lox] [0m[33m// This program tests variable shadowing[0m
[33m[tester::#FB4] [test-2.lox] [0m[33m// across nested scopes[0m
[33m[tester::#FB4] [test-2.lox] [0m{
[33m[tester::#FB4] [test-2.lox] [0m    var world = "before";
[33m[tester::#FB4] [test-2.lox] [0m    {
[33m[tester::#FB4] [test-2.lox] [0m        var world = "after";
[33m[tester::#FB4] [test-2.lox] [0m        print world;
[33m[tester::#FB4] [test-2.lox] [0m    }
[33m[tester::#FB4] [test-2.lox] [0m    print world;
[33m[tester::#FB4] [test-2.lox] [0m}
[33m[tester::#FB4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mafter
[33m[your_program] [0mbefore
[33m[tester::#FB4] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#FB4] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FB4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#FB4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FB4] [test-3.lox] [0m[33m// This program creates nested scopes and tests[0m
[33m[tester::#FB4] [test-3.lox] [0m[33m// local scopes and variable shadowing[0m
[33m[tester::#FB4] [test-3.lox] [0mvar hello = "global hello";
[33m[tester::#FB4] [test-3.lox] [0mvar baz = "global baz";
[33m[tester::#FB4] [test-3.lox] [0mvar foo = "global foo";
[33m[tester::#FB4] [test-3.lox] [0m{
[33m[tester::#FB4] [test-3.lox] [0m  var hello = "outer hello";
[33m[tester::#FB4] [test-3.lox] [0m  var baz = "outer baz";
[33m[tester::#FB4] [test-3.lox] [0m  {
[33m[tester::#FB4] [test-3.lox] [0m    var hello = "inner hello";
[33m[tester::#FB4] [test-3.lox] [0m    print hello;
[33m[tester::#FB4] [test-3.lox] [0m    print baz;
[33m[tester::#FB4] [test-3.lox] [0m    print foo;
[33m[tester::#FB4] [test-3.lox] [0m  }
[33m[tester::#FB4] [test-3.lox] [0m  print hello;
[33m[tester::#FB4] [test-3.lox] [0m  print baz;
[33m[tester::#FB4] [test-3.lox] [0m  print foo;
[33m[tester::#FB4] [test-3.lox] [0m}
[33m[tester::#FB4] [test-3.lox] [0mprint hello;
[33m[tester::#FB4] [test-3.lox] [0mprint baz;
[33m[tester::#FB4] [test-3.lox] [0mprint foo;
[33m[tester::#FB4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0minner hello
[33m[your_program] [0mouter baz
[33m[your_program] [0mglobal foo
[33m[your_program] [0mouter hello
[33m[your_program] [0mouter baz
[33m[your_program] [0mglobal foo
[33m[your_program] [0mglobal hello
[33m[your_program] [0mglobal baz
[33m[your_program] [0mglobal foo
[33m[tester::#FB4] [test-3] [0m[92m✓ 9 line(s) match on stdout[0m
[33m[tester::#FB4] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FB4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#FB4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FB4] [test-4.lox] [0m[33m// Variables declared in an outer scope should be[0m
[33m[tester::#FB4] [test-4.lox] [0m[33m// accessible inside inner scopes, but not the[0m
[33m[tester::#FB4] [test-4.lox] [0m[33m// other way around[0m
[33m[tester::#FB4] [test-4.lox] [0m{
[33m[tester::#FB4] [test-4.lox] [0m  var world = "outer world";
[33m[tester::#FB4] [test-4.lox] [0m  var bar = "outer bar";
[33m[tester::#FB4] [test-4.lox] [0m  {
[33m[tester::#FB4] [test-4.lox] [0m    world = "modified world";
[33m[tester::#FB4] [test-4.lox] [0m    var bar = "inner bar";
[33m[tester::#FB4] [test-4.lox] [0m    print world;
[33m[tester::#FB4] [test-4.lox] [0m    print bar;
[33m[tester::#FB4] [test-4.lox] [0m  }
[33m[tester::#FB4] [test-4.lox] [0m  print world;
[33m[tester::#FB4] [test-4.lox] [0m  print bar;
[33m[tester::#FB4] [test-4.lox] [0m}
[33m[tester::#FB4] [test-4.lox] [0mprint world;
[33m[tester::#FB4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mUndefined variable 'world'.
[33m[your_program] [0m[line 16]
[33m[your_program] [0mmodified world
[33m[your_program] [0minner bar
[33m[your_program] [0mmodified world
[33m[your_program] [0mouter bar
[33m[tester::#FB4] [test-4] [0m[92m✓ 4 line(s) match on stdout[0m
[33m[tester::#FB4] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#FB4] [0m[92mTest passed.[0m

[33m[tester::#VR5] [0m[94mRunning tests for Stage #VR5 (Statements & State - Block syntax)[0m
[33m[tester::#VR5] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#VR5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VR5] [test-1.lox] [0m[33m// This program tests that curly braces can be[0m
[33m[tester::#VR5] [test-1.lox] [0m[33m// used to group multiple statements into blocks[0m
[33m[tester::#VR5] [test-1.lox] [0m{
[33m[tester::#VR5] [test-1.lox] [0m    var foo = "quz";
[33m[tester::#VR5] [test-1.lox] [0m    print foo;
[33m[tester::#VR5] [test-1.lox] [0m}
[33m[tester::#VR5] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mquz
[33m[tester::#VR5] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#VR5] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#VR5] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#VR5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VR5] [test-2.lox] [0m[33m// This program tests that blocks can be used[0m
[33m[tester::#VR5] [test-2.lox] [0m[33m// to group statements and variables[0m
[33m[tester::#VR5] [test-2.lox] [0m[33m// creating local scopes[0m
[33m[tester::#VR5] [test-2.lox] [0m{
[33m[tester::#VR5] [test-2.lox] [0m    var baz = "before";
[33m[tester::#VR5] [test-2.lox] [0m    print baz;
[33m[tester::#VR5] [test-2.lox] [0m}
[33m[tester::#VR5] [test-2.lox] [0m{
[33m[tester::#VR5] [test-2.lox] [0m    var baz = "after";
[33m[tester::#VR5] [test-2.lox] [0m    print baz;
[33m[tester::#VR5] [test-2.lox] [0m}
[33m[tester::#VR5] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mbefore
[33m[your_program] [0mafter
[33m[tester::#VR5] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#VR5] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#VR5] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#VR5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VR5] [test-3.lox] [0m[33m// This program tests that scopes can be nested[0m
[33m[tester::#VR5] [test-3.lox] [0m{
[33m[tester::#VR5] [test-3.lox] [0m    var quz = 98;
[33m[tester::#VR5] [test-3.lox] [0m    {
[33m[tester::#VR5] [test-3.lox] [0m        var world = 98;
[33m[tester::#VR5] [test-3.lox] [0m        print world;
[33m[tester::#VR5] [test-3.lox] [0m    }
[33m[tester::#VR5] [test-3.lox] [0m    print quz;
[33m[tester::#VR5] [test-3.lox] [0m}
[33m[tester::#VR5] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m98
[33m[your_program] [0m98
[33m[tester::#VR5] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#VR5] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#VR5] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#VR5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VR5] [test-4.lox] [0m{
[33m[tester::#VR5] [test-4.lox] [0m    var world = 39;
[33m[tester::#VR5] [test-4.lox] [0m    var quz = 39;
[33m[tester::#VR5] [test-4.lox] [0m    {
[33m[tester::#VR5] [test-4.lox] [0m        print world + quz;
[33m[tester::#VR5] [test-4.lox] [0m    [33m// Missing closing curly brace[0m
[33m[tester::#VR5] [test-4.lox] [0m    [33m// Expect compile error[0m
[33m[tester::#VR5] [test-4.lox] [0m}
[33m[tester::#VR5] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[tester::#VR5] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#VR5] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#VR5] [0m[92mTest passed.[0m

[33m[tester::#PL3] [0m[94mRunning tests for Stage #PL3 (Statements & State - Assignment operation)[0m
[33m[tester::#PL3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#PL3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PL3] [test-1.lox] [0mvar bar;
[33m[tester::#PL3] [test-1.lox] [0mbar = 1;
[33m[tester::#PL3] [test-1.lox] [0mprint bar;
[33m[tester::#PL3] [test-1.lox] [0m[33m// The assignment operator should return[0m
[33m[tester::#PL3] [test-1.lox] [0m[33m// the value that was assigned[0m
[33m[tester::#PL3] [test-1.lox] [0mprint bar = 2;
[33m[tester::#PL3] [test-1.lox] [0mprint bar;
[33m[tester::#PL3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[your_program] [0m2
[33m[tester::#PL3] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#PL3] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PL3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#PL3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PL3] [test-2.lox] [0m[33m// This program tests that the assignment operator[0m
[33m[tester::#PL3] [test-2.lox] [0m[33m// works on any declared variable[0m
[33m[tester::#PL3] [test-2.lox] [0mvar hello = 62;
[33m[tester::#PL3] [test-2.lox] [0mvar world = 62;
[33m[tester::#PL3] [test-2.lox] [0mworld = hello;
[33m[tester::#PL3] [test-2.lox] [0mhello = world;
[33m[tester::#PL3] [test-2.lox] [0mprint hello + world;
[33m[tester::#PL3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m124
[33m[tester::#PL3] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#PL3] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PL3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#PL3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PL3] [test-3.lox] [0mvar bar;
[33m[tester::#PL3] [test-3.lox] [0mvar world;
[33m[tester::#PL3] [test-3.lox] [0m
[33m[tester::#PL3] [test-3.lox] [0m[33m// The assignment operator should return[0m
[33m[tester::#PL3] [test-3.lox] [0m[33m// the value that was assigned[0m
[33m[tester::#PL3] [test-3.lox] [0mbar = world = 69 + 28 * 57;
[33m[tester::#PL3] [test-3.lox] [0mprint bar;
[33m[tester::#PL3] [test-3.lox] [0mprint world;
[33m[tester::#PL3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m1665
[33m[your_program] [0m1665
[33m[tester::#PL3] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#PL3] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PL3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#PL3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PL3] [test-4.lox] [0mvar baz = 67;
[33m[tester::#PL3] [test-4.lox] [0mvar hello;
[33m[tester::#PL3] [test-4.lox] [0mvar bar;
[33m[tester::#PL3] [test-4.lox] [0m
[33m[tester::#PL3] [test-4.lox] [0m[33m// The assignment operator should return[0m
[33m[tester::#PL3] [test-4.lox] [0m[33m// the value that was assigned[0m
[33m[tester::#PL3] [test-4.lox] [0mbaz = hello = bar = baz * 2;
[33m[tester::#PL3] [test-4.lox] [0mprint baz;
[33m[tester::#PL3] [test-4.lox] [0mprint hello;
[33m[tester::#PL3] [test-4.lox] [0mprint hello;
[33m[tester::#PL3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m134
[33m[your_program] [0m134
[33m[your_program] [0m134
[33m[tester::#PL3] [test-4] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#PL3] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PL3] [0m[92mTest passed.[0m

[33m[tester::#DW9] [0m[94mRunning tests for Stage #DW9 (Statements & State - Variables: Redeclare variables)[0m
[33m[tester::#DW9] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#DW9] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DW9] [test-1.lox] [0mvar bar = "before";
[33m[tester::#DW9] [test-1.lox] [0mprint bar;
[33m[tester::#DW9] [test-1.lox] [0mvar bar = "after";
[33m[tester::#DW9] [test-1.lox] [0mprint bar;
[33m[tester::#DW9] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mbefore
[33m[your_program] [0mafter
[33m[tester::#DW9] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#DW9] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DW9] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#DW9] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DW9] [test-2.lox] [0mvar foo = "after";
[33m[tester::#DW9] [test-2.lox] [0mvar foo = "before";
[33m[tester::#DW9] [test-2.lox] [0m[33m// Using a previously declared variable's value to[0m
[33m[tester::#DW9] [test-2.lox] [0m[33m// initialize a new variable should work[0m
[33m[tester::#DW9] [test-2.lox] [0mvar foo = foo;
[33m[tester::#DW9] [test-2.lox] [0mprint foo;
[33m[tester::#DW9] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mbefore
[33m[tester::#DW9] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#DW9] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DW9] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#DW9] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DW9] [test-3.lox] [0m[33m// This program declares and initializes multiple[0m
[33m[tester::#DW9] [test-3.lox] [0m[33m// variables and prints their values[0m
[33m[tester::#DW9] [test-3.lox] [0mvar hello = 2;
[33m[tester::#DW9] [test-3.lox] [0mprint hello;
[33m[tester::#DW9] [test-3.lox] [0mvar hello = 3;
[33m[tester::#DW9] [test-3.lox] [0mprint hello;
[33m[tester::#DW9] [test-3.lox] [0mvar quz = 5;
[33m[tester::#DW9] [test-3.lox] [0mprint quz;
[33m[tester::#DW9] [test-3.lox] [0mvar hello = quz;
[33m[tester::#DW9] [test-3.lox] [0mprint hello;
[33m[tester::#DW9] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m2
[33m[your_program] [0m3
[33m[your_program] [0m5
[33m[your_program] [0m5
[33m[tester::#DW9] [test-3] [0m[92m✓ 4 line(s) match on stdout[0m
[33m[tester::#DW9] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DW9] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#DW9] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DW9] [test-4.lox] [0m[33m// As world is not declared before[0m
[33m[tester::#DW9] [test-4.lox] [0mvar baz = world; [33m// expect runtime error[0m
[33m[tester::#DW9] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mUndefined variable 'world'.
[33m[your_program] [0m[line 2]
[33m[tester::#DW9] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#DW9] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#DW9] [0m[92mTest passed.[0m

[33m[tester::#BC1] [0m[94mRunning tests for Stage #BC1 (Statements & State - Variables: Initialize variables)[0m
[33m[tester::#BC1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#BC1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BC1] [test-1.lox] [0m[33m// This program declares a variable but doesn't[0m
[33m[tester::#BC1] [test-1.lox] [0m[33m// initialize it[0m
[33m[tester::#BC1] [test-1.lox] [0m[33m// It prints the variable's value, which should be[0m
[33m[tester::#BC1] [test-1.lox] [0m[33m// nil[0m
[33m[tester::#BC1] [test-1.lox] [0mvar bar;
[33m[tester::#BC1] [test-1.lox] [0mprint bar;
[33m[tester::#BC1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mnil
[33m[tester::#BC1] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BC1] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BC1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#BC1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BC1] [test-2.lox] [0m[33m// This program declares a variable but doesn't[0m
[33m[tester::#BC1] [test-2.lox] [0m[33m// initialize it[0m
[33m[tester::#BC1] [test-2.lox] [0m[33m// It prints the variable's value[0m
[33m[tester::#BC1] [test-2.lox] [0mvar bar = "baz";
[33m[tester::#BC1] [test-2.lox] [0mvar quz;
[33m[tester::#BC1] [test-2.lox] [0mprint quz;
[33m[tester::#BC1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mnil
[33m[tester::#BC1] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BC1] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BC1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#BC1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BC1] [test-3.lox] [0m[33m// This program declares a variable but doesn't[0m
[33m[tester::#BC1] [test-3.lox] [0m[33m// initialize it[0m
[33m[tester::#BC1] [test-3.lox] [0m[33m// It prints the variable's value[0m
[33m[tester::#BC1] [test-3.lox] [0mvar quz = 55;
[33m[tester::#BC1] [test-3.lox] [0mvar hello;
[33m[tester::#BC1] [test-3.lox] [0mvar bar;
[33m[tester::#BC1] [test-3.lox] [0mprint hello;
[33m[tester::#BC1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mnil
[33m[tester::#BC1] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BC1] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BC1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#BC1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BC1] [test-4.lox] [0m[33m// This program declares a variable but doesn't[0m
[33m[tester::#BC1] [test-4.lox] [0m[33m// initialize it[0m
[33m[tester::#BC1] [test-4.lox] [0m[33m// It prints the variable's value[0m
[33m[tester::#BC1] [test-4.lox] [0mvar world = 36 + 15 * 99;
[33m[tester::#BC1] [test-4.lox] [0mprint world;
[33m[tester::#BC1] [test-4.lox] [0mvar foo = 15 * 99;
[33m[tester::#BC1] [test-4.lox] [0mprint world + foo;
[33m[tester::#BC1] [test-4.lox] [0mvar bar;
[33m[tester::#BC1] [test-4.lox] [0mprint bar;
[33m[tester::#BC1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m1521
[33m[your_program] [0m3006
[33m[your_program] [0mnil
[33m[tester::#BC1] [test-4] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#BC1] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BC1] [0m[92mTest passed.[0m

[33m[tester::#SV7] [0m[94mRunning tests for Stage #SV7 (Statements & State - Variables: Runtime Errors)[0m
[33m[tester::#SV7] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#SV7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SV7] [test-1.lox] [0m[33m// This program tries to access a variable before[0m
[33m[tester::#SV7] [test-1.lox] [0m[33m// it is declared[0m
[33m[tester::#SV7] [test-1.lox] [0m[33m// It leads to a runtime error[0m
[33m[tester::#SV7] [test-1.lox] [0mprint 80;
[33m[tester::#SV7] [test-1.lox] [0mprint x;
[33m[tester::#SV7] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mUndefined variable 'x'.
[33m[your_program] [0m[line 5]
[33m[your_program] [0m80
[33m[tester::#SV7] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SV7] [test-1] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#SV7] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#SV7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SV7] [test-2.lox] [0m[33m// This program tries to access a variable before[0m
[33m[tester::#SV7] [test-2.lox] [0m[33m// it is declared[0m
[33m[tester::#SV7] [test-2.lox] [0m[33m// It leads to a runtime error[0m
[33m[tester::#SV7] [test-2.lox] [0mvar foo = 90;
[33m[tester::#SV7] [test-2.lox] [0mprint quz;
[33m[tester::#SV7] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mUndefined variable 'quz'.
[33m[your_program] [0m[line 5]
[33m[tester::#SV7] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SV7] [test-2] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#SV7] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#SV7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SV7] [test-3.lox] [0m[33m// This program tries to access a variable before[0m
[33m[tester::#SV7] [test-3.lox] [0m[33m// it is declared[0m
[33m[tester::#SV7] [test-3.lox] [0m[33m// It leads to a runtime error[0m
[33m[tester::#SV7] [test-3.lox] [0mvar quz = 49;
[33m[tester::#SV7] [test-3.lox] [0mvar result = (quz + world) / foo;
[33m[tester::#SV7] [test-3.lox] [0mprint result;
[33m[tester::#SV7] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mUndefined variable 'world'.
[33m[your_program] [0m[line 5]
[33m[tester::#SV7] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SV7] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#SV7] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#SV7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SV7] [test-4.lox] [0m[33m// This program tries to access a variable before[0m
[33m[tester::#SV7] [test-4.lox] [0m[33m// it is declared[0m
[33m[tester::#SV7] [test-4.lox] [0m[33m// It leads to a runtime error[0m
[33m[tester::#SV7] [test-4.lox] [0mvar hello = 68;
[33m[tester::#SV7] [test-4.lox] [0mvar world = 75;
[33m[tester::#SV7] [test-4.lox] [0mvar quz = 95;
[33m[tester::#SV7] [test-4.lox] [0mprint hello + world + quz + bar; print 90;
[33m[tester::#SV7] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mUndefined variable 'bar'.
[33m[your_program] [0m[line 7]
[33m[tester::#SV7] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SV7] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#SV7] [0m[92mTest passed.[0m

[33m[tester::#YG2] [0m[94mRunning tests for Stage #YG2 (Statements & State - Variables: Declare variables)[0m
[33m[tester::#YG2] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#YG2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YG2] [test-1.lox] [0m[33m// This program tests that variables are[0m
[33m[tester::#YG2] [test-1.lox] [0m[33m// initialized to the correct value[0m
[33m[tester::#YG2] [test-1.lox] [0mvar foo = 10;
[33m[tester::#YG2] [test-1.lox] [0mprint foo;
[33m[tester::#YG2] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m10
[33m[tester::#YG2] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YG2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YG2] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#YG2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YG2] [test-2.lox] [0m[33m// This program declares multiple variables and[0m
[33m[tester::#YG2] [test-2.lox] [0m[33m// prints the result of arithmetic operations on[0m
[33m[tester::#YG2] [test-2.lox] [0m[33m// them[0m
[33m[tester::#YG2] [test-2.lox] [0mvar quz = 77;
[33m[tester::#YG2] [test-2.lox] [0mvar hello = 77;
[33m[tester::#YG2] [test-2.lox] [0mprint quz + hello;
[33m[tester::#YG2] [test-2.lox] [0mvar baz = 77;
[33m[tester::#YG2] [test-2.lox] [0mprint quz + hello + baz;
[33m[tester::#YG2] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m154
[33m[your_program] [0m231
[33m[tester::#YG2] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#YG2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YG2] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#YG2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YG2] [test-3.lox] [0m[33m// This program assigns the result of an[0m
[33m[tester::#YG2] [test-3.lox] [0m[33m// arithmetic expression to a variable[0m
[33m[tester::#YG2] [test-3.lox] [0m[33m// Then it prints the value of the variable[0m
[33m[tester::#YG2] [test-3.lox] [0mvar bar = (8 * (86 + 86)) / 4 + 86;
[33m[tester::#YG2] [test-3.lox] [0mprint bar;
[33m[tester::#YG2] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m430
[33m[tester::#YG2] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YG2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YG2] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#YG2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YG2] [test-4.lox] [0m[33m// This program declares variables and performs[0m
[33m[tester::#YG2] [test-4.lox] [0m[33m// operations on them[0m
[33m[tester::#YG2] [test-4.lox] [0m[33m// Finally it prints the result of the operations[0m
[33m[tester::#YG2] [test-4.lox] [0mvar baz = 16;
[33m[tester::#YG2] [test-4.lox] [0mvar bar = baz;
[33m[tester::#YG2] [test-4.lox] [0mprint bar + baz;
[33m[tester::#YG2] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m32
[33m[tester::#YG2] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YG2] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YG2] [0m[92mTest passed.[0m

[33m[tester::#FI3] [0m[94mRunning tests for Stage #FI3 (Statements & State - Expression statements)[0m
[33m[tester::#FI3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#FI3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FI3] [test-1.lox] [0m[33m// This program tests that statements are executed[0m
[33m[tester::#FI3] [test-1.lox] [0m[33m// even if they don't have any side effects[0m
[33m[tester::#FI3] [test-1.lox] [0m[33m// It also tests complex arithmetic expressions[0m
[33m[tester::#FI3] [test-1.lox] [0m[33m// and string concatenation[0m
[33m[tester::#FI3] [test-1.lox] [0m(22 + 77 - 60) > (45 - 22) * 2;
[33m[tester::#FI3] [test-1.lox] [0mprint !false;
[33m[tester::#FI3] [test-1.lox] [0m"foo" + "bar" + "hello" == "foobarhello";
[33m[tester::#FI3] [test-1.lox] [0mprint !false;
[33m[tester::#FI3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[your_program] [0mtrue
[33m[tester::#FI3] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#FI3] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FI3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#FI3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FI3] [test-2.lox] [0m[33m// This program tests statements that don't have[0m
[33m[tester::#FI3] [test-2.lox] [0m[33m// any side effects[0m
[33m[tester::#FI3] [test-2.lox] [0m57 - 92 >= -65 * 2 / 65 + 70;
[33m[tester::#FI3] [test-2.lox] [0mfalse == false;
[33m[tester::#FI3] [test-2.lox] [0m("foo" == "world") == ("quz" != "bar");
[33m[tester::#FI3] [test-2.lox] [0mprint false;
[33m[tester::#FI3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfalse
[33m[tester::#FI3] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#FI3] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FI3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#FI3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FI3] [test-3.lox] [0m[33m// This program tests that the + operator is only[0m
[33m[tester::#FI3] [test-3.lox] [0m[33m// supported when both operands are numbers or[0m
[33m[tester::#FI3] [test-3.lox] [0m[33m// both are strings[0m
[33m[tester::#FI3] [test-3.lox] [0mprint "the expression below is invalid";
[33m[tester::#FI3] [test-3.lox] [0m45 + "foo";
[33m[tester::#FI3] [test-3.lox] [0mprint "this should not be printed";
[33m[tester::#FI3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mthe expression below is invalid
[33m[your_program] [0mOperands must be two numbers or two strings.
[33m[your_program] [0m[line 5]
[33m[tester::#FI3] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#FI3] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#FI3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#FI3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FI3] [test-4.lox] [0m[33m// This program tests that the * operator is only[0m
[33m[tester::#FI3] [test-4.lox] [0m[33m// supported when both operands are numbers[0m
[33m[tester::#FI3] [test-4.lox] [0mprint "53" + "foo";
[33m[tester::#FI3] [test-4.lox] [0mprint true * (25 + 97);
[33m[tester::#FI3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 4]
[33m[your_program] [0m53foo
[33m[tester::#FI3] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#FI3] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#FI3] [0m[92mTest passed.[0m

[33m[tester::#OE4] [0m[94mRunning tests for Stage #OE4 (Statements & State - Print: Multiple statements)[0m
[33m[tester::#OE4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#OE4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE4] [test-1.lox] [0m[33m// Concatenation of strings should work[0m
[33m[tester::#OE4] [test-1.lox] [0mprint "foo" + "hello" + "baz";
[33m[tester::#OE4] [test-1.lox] [0mprint 25 - 79;
[33m[tester::#OE4] [test-1.lox] [0mprint "baz" == "quz";
[33m[tester::#OE4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfoohellobaz
[33m[your_program] [0m-54
[33m[your_program] [0mfalse
[33m[tester::#OE4] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#OE4] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#OE4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE4] [test-2.lox] [0m[33m// Multiple statements in a single line should work[0m
[33m[tester::#OE4] [test-2.lox] [0mprint "baz"; print true;
[33m[tester::#OE4] [test-2.lox] [0mprint true;
[33m[tester::#OE4] [test-2.lox] [0mprint "quz"; print 75;
[33m[tester::#OE4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mbaz
[33m[your_program] [0mtrue
[33m[your_program] [0mtrue
[33m[your_program] [0mquz
[33m[your_program] [0m75
[33m[tester::#OE4] [test-2] [0m[92m✓ 5 line(s) match on stdout[0m
[33m[tester::#OE4] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#OE4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE4] [test-3.lox] [0m[33m// Leading whitespace should be ignored[0m
[33m[tester::#OE4] [test-3.lox] [0mprint 86;
[33m[tester::#OE4] [test-3.lox] [0m    print 86 + 39;
[33m[tester::#OE4] [test-3.lox] [0m        print 86 + 39 + 65;
[33m[tester::#OE4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m86
[33m[your_program] [0m125
[33m[your_program] [0m190
[33m[tester::#OE4] [test-3] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#OE4] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#OE4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE4] [test-4.lox] [0mprint false != true;
[33m[tester::#OE4] [test-4.lox] [0m
[33m[tester::#OE4] [test-4.lox] [0m[33m// multi-line strings should be supported[0m
[33m[tester::#OE4] [test-4.lox] [0mprint "72
[33m[tester::#OE4] [test-4.lox] [0m97
[33m[tester::#OE4] [test-4.lox] [0m21
[33m[tester::#OE4] [test-4.lox] [0m";
[33m[tester::#OE4] [test-4.lox] [0m
[33m[tester::#OE4] [test-4.lox] [0mprint "There should be an empty line above this.";
[33m[tester::#OE4] [test-4.lox] [0m
[33m[tester::#OE4] [test-4.lox] [0mprint "(" + "" + ")";
[33m[tester::#OE4] [test-4.lox] [0m
[33m[tester::#OE4] [test-4.lox] [0m[33m// non-ascii characters should be supported[0m
[33m[tester::#OE4] [test-4.lox] [0mprint "non-ascii: ॐ";
[33m[tester::#OE4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[your_program] [0m72
[33m[your_program] [0m97
[33m[your_program] [0m21
[33m[your_program] [0m
[33m[your_program] [0mThere should be an empty line above this.
[33m[your_program] [0m()
[33m[your_program] [0mnon-ascii: ॐ
[33m[tester::#OE4] [test-4] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[tester::#OE4] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE4] [0m[92mTest passed.[0m

[33m[tester::#XY1] [0m[94mRunning tests for Stage #XY1 (Statements & State - Print: Generate output)[0m
[33m[tester::#XY1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#XY1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XY1] [test-1.lox] [0mprint false;
[33m[tester::#XY1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfalse
[33m[tester::#XY1] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XY1] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XY1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#XY1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XY1] [test-2.lox] [0m[33m// Concatenation of strings should work[0m
[33m[tester::#XY1] [test-2.lox] [0mprint "quz" + "hello" + "foo";
[33m[tester::#XY1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mquzhellofoo
[33m[tester::#XY1] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XY1] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XY1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#XY1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XY1] [test-3.lox] [0mprint (26 * 2 + 90 * 2) / (2);
[33m[tester::#XY1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m116
[33m[tester::#XY1] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XY1] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XY1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#XY1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XY1] [test-4.lox] [0m[33m// Print statements expect an expression[0m
[33m[tester::#XY1] [test-4.lox] [0mprint; [33m// expect compile error[0m
[33m[tester::#XY1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[tester::#XY1] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XY1] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#XY1] [0m[92mTest passed.[0m

[33m[tester::#IB5] [0m[94mRunning tests for Stage #IB5 (Evaluating Expressions - Runtime Errors: Relational Operators)[0m
[33m[tester::#IB5] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#IB5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#IB5] [test-1.lox] [0m"world" < true
[33m[tester::#IB5] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 1]
[33m[tester::#IB5] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#IB5] [test-1] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#IB5] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#IB5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#IB5] [test-2.lox] [0mfalse <= (60 + 27)
[33m[tester::#IB5] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 1]
[33m[tester::#IB5] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#IB5] [test-2] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#IB5] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#IB5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#IB5] [test-3.lox] [0m76 > ("hello" + "bar")
[33m[tester::#IB5] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 1]
[33m[tester::#IB5] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#IB5] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#IB5] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#IB5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#IB5] [test-4.lox] [0mtrue >= true
[33m[tester::#IB5] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 1]
[33m[tester::#IB5] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#IB5] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#IB5] [0m[92mTest passed.[0m

[33m[tester::#CQ1] [0m[94mRunning tests for Stage #CQ1 (Evaluating Expressions - Runtime Errors: Binary Operators (2/2))[0m
[33m[tester::#CQ1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#CQ1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#CQ1] [test-1.lox] [0m"bar" + true
[33m[tester::#CQ1] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be two numbers or two strings.
[33m[your_program] [0m[line 1]
[33m[tester::#CQ1] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#CQ1] [test-1] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#CQ1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#CQ1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#CQ1] [test-2.lox] [0m22 + "bar" + 78
[33m[tester::#CQ1] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be two numbers or two strings.
[33m[your_program] [0m[line 1]
[33m[tester::#CQ1] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#CQ1] [test-2] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#CQ1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#CQ1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#CQ1] [test-3.lox] [0m13 - false
[33m[tester::#CQ1] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be two numbers or two strings.
[33m[your_program] [0m[line 1]
[33m[tester::#CQ1] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#CQ1] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#CQ1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#CQ1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#CQ1] [test-4.lox] [0mfalse - ("foo" + "quz")
[33m[tester::#CQ1] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be two numbers or two strings.
[33m[your_program] [0m[line 1]
[33m[tester::#CQ1] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#CQ1] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#CQ1] [0m[92mTest passed.[0m

[33m[tester::#YU6] [0m[94mRunning tests for Stage #YU6 (Evaluating Expressions - Runtime Errors: Binary Operators (1/2))[0m
[33m[tester::#YU6] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#YU6] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YU6] [test-1.lox] [0m16 * "quz"
[33m[tester::#YU6] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 1]
[33m[tester::#YU6] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YU6] [test-1] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#YU6] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#YU6] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YU6] [test-2.lox] [0m"quz" / 68
[33m[tester::#YU6] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 1]
[33m[tester::#YU6] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YU6] [test-2] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#YU6] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#YU6] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YU6] [test-3.lox] [0mfalse / false
[33m[tester::#YU6] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 1]
[33m[tester::#YU6] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YU6] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#YU6] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#YU6] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YU6] [test-4.lox] [0m("world" + "quz") * ("bar" + "bar")
[33m[tester::#YU6] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 1]
[33m[tester::#YU6] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YU6] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#YU6] [0m[92mTest passed.[0m

[33m[tester::#GJ9] [0m[94mRunning tests for Stage #GJ9 (Evaluating Expressions - Runtime Errors: Unary Operators)[0m
[33m[tester::#GJ9] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#GJ9] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#GJ9] [test-1.lox] [0m-"quz"
[33m[tester::#GJ9] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperand must be a number.
[33m[your_program] [0m[line 1]
[33m[tester::#GJ9] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#GJ9] [test-1] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#GJ9] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#GJ9] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#GJ9] [test-2.lox] [0m-true
[33m[tester::#GJ9] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperand must be a number.
[33m[your_program] [0m[line 1]
[33m[tester::#GJ9] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#GJ9] [test-2] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#GJ9] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#GJ9] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#GJ9] [test-3.lox] [0m-false
[33m[tester::#GJ9] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperand must be a number.
[33m[your_program] [0m[line 1]
[33m[tester::#GJ9] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#GJ9] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#GJ9] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#GJ9] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#GJ9] [test-4.lox] [0m-("world" + "hello")
[33m[tester::#GJ9] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mOperand must be a number.
[33m[your_program] [0m[line 1]
[33m[tester::#GJ9] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#GJ9] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#GJ9] [0m[92mTest passed.[0m

[33m[tester::#HW7] [0m[94mRunning tests for Stage #HW7 (Evaluating Expressions - Equality Operators)[0m
[33m[tester::#HW7] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#HW7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#HW7] [test-1.lox] [0m"quz" != "bar"
[33m[tester::#HW7] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#HW7] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#HW7] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#HW7] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#HW7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#HW7] [test-2.lox] [0m"quz" == "quz"
[33m[tester::#HW7] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#HW7] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#HW7] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#HW7] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#HW7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#HW7] [test-3.lox] [0m92 == "92"
[33m[tester::#HW7] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfalse
[33m[tester::#HW7] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#HW7] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#HW7] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#HW7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#HW7] [test-4.lox] [0m115 == (62 + 53)
[33m[tester::#HW7] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#HW7] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#HW7] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#HW7] [0m[92mTest passed.[0m

[33m[tester::#ET4] [0m[94mRunning tests for Stage #ET4 (Evaluating Expressions - Relational Operators)[0m
[33m[tester::#ET4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#ET4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ET4] [test-1.lox] [0m75 > -122
[33m[tester::#ET4] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#ET4] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#ET4] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ET4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#ET4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ET4] [test-2.lox] [0m75 <= 182
[33m[tester::#ET4] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#ET4] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#ET4] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ET4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#ET4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ET4] [test-3.lox] [0m60 >= 60
[33m[tester::#ET4] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#ET4] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#ET4] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ET4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#ET4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ET4] [test-4.lox] [0m(29 - 51) >= -(150 / 75 + 52)
[33m[tester::#ET4] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#ET4] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#ET4] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ET4] [0m[92mTest passed.[0m

[33m[tester::#JX8] [0m[94mRunning tests for Stage #JX8 (Evaluating Expressions - String Concatenation)[0m
[33m[tester::#JX8] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#JX8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JX8] [test-1.lox] [0m"hello" + "foo"
[33m[tester::#JX8] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mhellofoo
[33m[tester::#JX8] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#JX8] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#JX8] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#JX8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JX8] [test-2.lox] [0m"world" + "50"
[33m[tester::#JX8] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mworld50
[33m[tester::#JX8] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#JX8] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#JX8] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#JX8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JX8] [test-3.lox] [0m"baz" + "quz" + "baz"
[33m[tester::#JX8] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mbazquzbaz
[33m[tester::#JX8] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#JX8] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#JX8] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#JX8] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JX8] [test-4.lox] [0m("world" + "hello") + ("hello" + "bar")
[33m[tester::#JX8] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mworldhellohellobar
[33m[tester::#JX8] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#JX8] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#JX8] [0m[92mTest passed.[0m

[33m[tester::#JY2] [0m[94mRunning tests for Stage #JY2 (Evaluating Expressions - Arithmetic Operators (2/2))[0m
[33m[tester::#JY2] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#JY2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JY2] [test-1.lox] [0m38 - 73
[33m[tester::#JY2] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m-35
[33m[tester::#JY2] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#JY2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#JY2] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#JY2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JY2] [test-2.lox] [0m28 + 35 - 35
[33m[tester::#JY2] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m28
[33m[tester::#JY2] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#JY2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#JY2] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#JY2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JY2] [test-3.lox] [0m74 + 38 - (-(23 - 16))
[33m[tester::#JY2] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m119
[33m[tester::#JY2] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#JY2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#JY2] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#JY2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JY2] [test-4.lox] [0m(-52 + 52) * (61 * 35) / (1 + 4)
[33m[tester::#JY2] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m0
[33m[tester::#JY2] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#JY2] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#JY2] [0m[92mTest passed.[0m

[33m[tester::#BP3] [0m[94mRunning tests for Stage #BP3 (Evaluating Expressions - Arithmetic Operators (1/2))[0m
[33m[tester::#BP3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#BP3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BP3] [test-1.lox] [0m18 * 91
[33m[tester::#BP3] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m1638
[33m[tester::#BP3] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BP3] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BP3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#BP3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BP3] [test-2.lox] [0m42 / 5
[33m[tester::#BP3] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m8.4
[33m[tester::#BP3] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BP3] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BP3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#BP3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BP3] [test-3.lox] [0m7 * 3 / 7 / 1
[33m[tester::#BP3] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m3
[33m[tester::#BP3] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BP3] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BP3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#BP3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BP3] [test-4.lox] [0m(18 * 3 / (3 * 6))
[33m[tester::#BP3] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m3
[33m[tester::#BP3] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BP3] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BP3] [0m[92mTest passed.[0m

[33m[tester::#DC1] [0m[94mRunning tests for Stage #DC1 (Evaluating Expressions - Unary Operators: Negation & Not)[0m
[33m[tester::#DC1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#DC1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DC1] [test-1.lox] [0m-40
[33m[tester::#DC1] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m-40
[33m[tester::#DC1] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#DC1] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DC1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#DC1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DC1] [test-2.lox] [0m!false
[33m[tester::#DC1] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#DC1] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#DC1] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DC1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#DC1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DC1] [test-3.lox] [0m!nil
[33m[tester::#DC1] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#DC1] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#DC1] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DC1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#DC1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DC1] [test-4.lox] [0m(!!15)
[33m[tester::#DC1] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#DC1] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#DC1] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DC1] [0m[92mTest passed.[0m

[33m[tester::#OQ9] [0m[94mRunning tests for Stage #OQ9 (Evaluating Expressions - Parentheses)[0m
[33m[tester::#OQ9] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#OQ9] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OQ9] [test-1.lox] [0m(true)
[33m[tester::#OQ9] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#OQ9] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#OQ9] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OQ9] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#OQ9] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OQ9] [test-2.lox] [0m(56)
[33m[tester::#OQ9] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m56
[33m[tester::#OQ9] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#OQ9] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OQ9] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#OQ9] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OQ9] [test-3.lox] [0m("baz hello")
[33m[tester::#OQ9] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mbaz hello
[33m[tester::#OQ9] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#OQ9] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OQ9] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#OQ9] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OQ9] [test-4.lox] [0m((false))
[33m[tester::#OQ9] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfalse
[33m[tester::#OQ9] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#OQ9] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OQ9] [0m[92mTest passed.[0m

[33m[tester::#LV1] [0m[94mRunning tests for Stage #LV1 (Evaluating Expressions - Literals: Strings & Numbers)[0m
[33m[tester::#LV1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#LV1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#LV1] [test-1.lox] [0m94
[33m[tester::#LV1] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m94
[33m[tester::#LV1] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#LV1] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#LV1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#LV1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#LV1] [test-2.lox] [0m97.92
[33m[tester::#LV1] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m97.92
[33m[tester::#LV1] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#LV1] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#LV1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#LV1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#LV1] [test-3.lox] [0m"hello baz"
[33m[tester::#LV1] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mhello baz
[33m[tester::#LV1] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#LV1] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#LV1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#LV1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#LV1] [test-4.lox] [0m"60"
[33m[tester::#LV1] [test-4] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m60
[33m[tester::#LV1] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#LV1] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#LV1] [0m[92mTest passed.[0m

[33m[tester::#IZ6] [0m[94mRunning tests for Stage #IZ6 (Evaluating Expressions - Literals: Booleans & Nil)[0m
[33m[tester::#IZ6] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#IZ6] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#IZ6] [test-1.lox] [0mtrue
[33m[tester::#IZ6] [test-1] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#IZ6] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#IZ6] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#IZ6] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#IZ6] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#IZ6] [test-2.lox] [0mfalse
[33m[tester::#IZ6] [test-2] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfalse
[33m[tester::#IZ6] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#IZ6] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#IZ6] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#IZ6] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#IZ6] [test-3.lox] [0mnil
[33m[tester::#IZ6] [test-3] [0m[94m$ ./your_program.sh evaluate test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mnil
[33m[tester::#IZ6] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#IZ6] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#IZ6] [0m[92mTest passed.[0m

[33m[tester::#WZ8] [0m[94mRunning tests for Stage #WZ8 (Parsing Expressions - Syntactic errors)[0m
[33m[tester::#WZ8] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#WZ8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WZ8] [test-1.lox] [0m"baz
[33m[tester::#WZ8] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[tester::#WZ8] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#WZ8] [test-1] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#WZ8] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#WZ8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WZ8] [test-2.lox] [0m(foo
[33m[tester::#WZ8] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mParsing error at line 1: Invalid index 2, max_idx is 1.
[33m[tester::#WZ8] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#WZ8] [test-2] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#WZ8] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#WZ8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WZ8] [test-3.lox] [0m(46 +)
[33m[tester::#WZ8] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mFailed to parse token ) at line 1.
[33m[tester::#WZ8] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#WZ8] [test-3] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#WZ8] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#WZ8] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WZ8] [test-4.lox] [0m+
[33m[tester::#WZ8] [test-4] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mFailed to parse token + at line 1.
[33m[tester::#WZ8] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#WZ8] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#WZ8] [0m[92mTest passed.[0m

[33m[tester::#HT8] [0m[94mRunning tests for Stage #HT8 (Parsing Expressions - Equality operators)[0m
[33m[tester::#HT8] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#HT8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#HT8] [test-1.lox] [0m"foo"!="hello"
[33m[tester::#HT8] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(!= foo hello)
[33m[tester::#HT8] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#HT8] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#HT8] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#HT8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#HT8] [test-2.lox] [0m"bar" == "bar"
[33m[tester::#HT8] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(== bar bar)
[33m[tester::#HT8] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#HT8] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#HT8] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#HT8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#HT8] [test-3.lox] [0m51 == 33
[33m[tester::#HT8] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(== 51.0 33.0)
[33m[tester::#HT8] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#HT8] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#HT8] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#HT8] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#HT8] [test-4.lox] [0m(10 != 71) == ((-45 + 47) >= (86 * 11))
[33m[tester::#HT8] [test-4] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(== (group (!= 10.0 71.0)) (group (>= (group (+ (- 45.0) 47.0)) (group (* 86.0 11.0)))))
[33m[tester::#HT8] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#HT8] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#HT8] [0m[92mTest passed.[0m

[33m[tester::#UH4] [0m[94mRunning tests for Stage #UH4 (Parsing Expressions - Comparison operators)[0m
[33m[tester::#UH4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#UH4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#UH4] [test-1.lox] [0m42 > 26
[33m[tester::#UH4] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(> 42.0 26.0)
[33m[tester::#UH4] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#UH4] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#UH4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#UH4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#UH4] [test-2.lox] [0m16 <= 58
[33m[tester::#UH4] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(<= 16.0 58.0)
[33m[tester::#UH4] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#UH4] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#UH4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#UH4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#UH4] [test-3.lox] [0m42 < 58 < 74
[33m[tester::#UH4] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(< (< 42.0 58.0) 74.0)
[33m[tester::#UH4] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#UH4] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#UH4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#UH4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#UH4] [test-4.lox] [0m(27 - 26) >= -(90 / 15 + 16)
[33m[tester::#UH4] [test-4] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(>= (group (- 27.0 26.0)) (- (group (+ (/ 90.0 15.0) 16.0))))
[33m[tester::#UH4] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#UH4] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#UH4] [0m[92mTest passed.[0m

[33m[tester::#YF2] [0m[94mRunning tests for Stage #YF2 (Parsing Expressions - Arithmetic operators (2/2))[0m
[33m[tester::#YF2] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#YF2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YF2] [test-1.lox] [0m"hello" + "world"
[33m[tester::#YF2] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(+ hello world)
[33m[tester::#YF2] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YF2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YF2] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#YF2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YF2] [test-2.lox] [0m97 - 99 * 66 - 32
[33m[tester::#YF2] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(- (- 97.0 (* 99.0 66.0)) 32.0)
[33m[tester::#YF2] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YF2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YF2] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#YF2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YF2] [test-3.lox] [0m21 + 76 - 74 / 12
[33m[tester::#YF2] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(- (+ 21.0 76.0) (/ 74.0 12.0))
[33m[tester::#YF2] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YF2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YF2] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#YF2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YF2] [test-4.lox] [0m(-61 + 76) * (95 * 96) / (58 + 47)
[33m[tester::#YF2] [test-4] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(/ (* (group (+ (- 61.0) 76.0)) (group (* 95.0 96.0))) (group (+ 58.0 47.0)))
[33m[tester::#YF2] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YF2] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YF2] [0m[92mTest passed.[0m

[33m[tester::#WA9] [0m[94mRunning tests for Stage #WA9 (Parsing Expressions - Arithmetic operators (1/2))[0m
[33m[tester::#WA9] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#WA9] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WA9] [test-1.lox] [0m79 * 78 / 78
[33m[tester::#WA9] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(/ (* 79.0 78.0) 78.0)
[33m[tester::#WA9] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#WA9] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#WA9] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#WA9] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WA9] [test-2.lox] [0m22 / 93 / 43
[33m[tester::#WA9] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(/ (/ 22.0 93.0) 43.0)
[33m[tester::#WA9] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#WA9] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#WA9] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#WA9] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WA9] [test-3.lox] [0m91 * 33 * 13 / 34
[33m[tester::#WA9] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(/ (* (* 91.0 33.0) 13.0) 34.0)
[33m[tester::#WA9] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#WA9] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#WA9] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#WA9] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WA9] [test-4.lox] [0m(18 * -94 / (99 * 95))
[33m[tester::#WA9] [test-4] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(group (/ (* 18.0 (- 94.0)) (group (* 99.0 95.0))))
[33m[tester::#WA9] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#WA9] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#WA9] [0m[92mTest passed.[0m

[33m[tester::#MQ1] [0m[94mRunning tests for Stage #MQ1 (Parsing Expressions - Unary Operators)[0m
[33m[tester::#MQ1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#MQ1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#MQ1] [test-1.lox] [0m!false
[33m[tester::#MQ1] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(! false)
[33m[tester::#MQ1] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#MQ1] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#MQ1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#MQ1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#MQ1] [test-2.lox] [0m-38
[33m[tester::#MQ1] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(- 38.0)
[33m[tester::#MQ1] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#MQ1] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#MQ1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#MQ1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#MQ1] [test-3.lox] [0m!!true
[33m[tester::#MQ1] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(! (! true))
[33m[tester::#MQ1] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#MQ1] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#MQ1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#MQ1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#MQ1] [test-4.lox] [0m(!!(false))
[33m[tester::#MQ1] [test-4] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(group (! (! (group false))))
[33m[tester::#MQ1] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#MQ1] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#MQ1] [0m[92mTest passed.[0m

[33m[tester::#XE6] [0m[94mRunning tests for Stage #XE6 (Parsing Expressions - Parentheses)[0m
[33m[tester::#XE6] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#XE6] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XE6] [test-1.lox] [0m("foo")
[33m[tester::#XE6] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(group foo)
[33m[tester::#XE6] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XE6] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XE6] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#XE6] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XE6] [test-2.lox] [0m((true))
[33m[tester::#XE6] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(group (group true))
[33m[tester::#XE6] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XE6] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XE6] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#XE6] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XE6] [test-3.lox] [0m(nil)
[33m[tester::#XE6] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(group nil)
[33m[tester::#XE6] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XE6] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XE6] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#XE6] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XE6] [test-4.lox] [0m(37.73)
[33m[tester::#XE6] [test-4] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m(group 37.73)
[33m[tester::#XE6] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XE6] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XE6] [0m[92mTest passed.[0m

[33m[tester::#TH5] [0m[94mRunning tests for Stage #TH5 (Parsing Expressions - String literals)[0m
[33m[tester::#TH5] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#TH5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#TH5] [test-1.lox] [0m"bar foo"
[33m[tester::#TH5] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mbar foo
[33m[tester::#TH5] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#TH5] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#TH5] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#TH5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#TH5] [test-2.lox] [0m"'bar'"
[33m[tester::#TH5] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m'bar'
[33m[tester::#TH5] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#TH5] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#TH5] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#TH5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#TH5] [test-3.lox] [0m"[33m// hello"[0m
[33m[tester::#TH5] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m// hello
[33m[tester::#TH5] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#TH5] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#TH5] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#TH5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#TH5] [test-4.lox] [0m"52"
[33m[tester::#TH5] [test-4] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m52
[33m[tester::#TH5] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#TH5] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#TH5] [0m[92mTest passed.[0m

[33m[tester::#RA8] [0m[94mRunning tests for Stage #RA8 (Parsing Expressions - Number literals)[0m
[33m[tester::#RA8] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#RA8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#RA8] [test-1.lox] [0m97
[33m[tester::#RA8] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m97.0
[33m[tester::#RA8] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#RA8] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#RA8] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#RA8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#RA8] [test-2.lox] [0m0.0
[33m[tester::#RA8] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m0.0
[33m[tester::#RA8] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#RA8] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#RA8] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#RA8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#RA8] [test-3.lox] [0m15.31
[33m[tester::#RA8] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m15.31
[33m[tester::#RA8] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#RA8] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#RA8] [0m[92mTest passed.[0m

[33m[tester::#SC2] [0m[94mRunning tests for Stage #SC2 (Parsing Expressions - Booleans & Nil)[0m
[33m[tester::#SC2] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#SC2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SC2] [test-1.lox] [0mtrue
[33m[tester::#SC2] [test-1] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mtrue
[33m[tester::#SC2] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SC2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#SC2] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#SC2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SC2] [test-2.lox] [0mfalse
[33m[tester::#SC2] [test-2] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mfalse
[33m[tester::#SC2] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SC2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#SC2] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#SC2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SC2] [test-3.lox] [0mnil
[33m[tester::#SC2] [test-3] [0m[94m$ ./your_program.sh parse test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mnil
[33m[tester::#SC2] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SC2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#SC2] [0m[92mTest passed.[0m

[33m[tester::#PQ5] [0m[94mRunning tests for Stage #PQ5 (Scanning: Reserved words)[0m
[33m[tester::#PQ5] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#PQ5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PQ5] [test-1.lox] [0msuper
[33m[tester::#PQ5] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mSUPER super null
[33m[your_program] [0mEOF  null
[33m[tester::#PQ5] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#PQ5] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PQ5] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#PQ5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PQ5] [test-2.lox] [0mnil RETURN NIL WHILE FALSE TRUE FUN CLASS this var return fun THIS else class print ELSE FOR super PRINT AND true if or IF for VAR false while and SUPER OR
[33m[tester::#PQ5] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mNIL nil null
[33m[your_program] [0mIDENTIFIER RETURN null
[33m[your_program] [0mIDENTIFIER NIL null
[33m[your_program] [0mIDENTIFIER WHILE null
[33m[your_program] [0mIDENTIFIER FALSE null
[33m[your_program] [0mIDENTIFIER TRUE null
[33m[your_program] [0mIDENTIFIER FUN null
[33m[your_program] [0mIDENTIFIER CLASS null
[33m[your_program] [0mTHIS this null
[33m[your_program] [0mVAR var null
[33m[your_program] [0mRETURN return null
[33m[your_program] [0mFUN fun null
[33m[your_program] [0mIDENTIFIER THIS null
[33m[your_program] [0mELSE else null
[33m[your_program] [0mCLASS class null
[33m[your_program] [0mPRINT print null
[33m[your_program] [0mIDENTIFIER ELSE null
[33m[your_program] [0mIDENTIFIER FOR null
[33m[your_program] [0mSUPER super null
[33m[your_program] [0mIDENTIFIER PRINT null
[33m[your_program] [0mIDENTIFIER AND null
[33m[your_program] [0mTRUE true null
[33m[your_program] [0mIF if null
[33m[your_program] [0mOR or null
[33m[your_program] [0mIDENTIFIER IF null
[33m[your_program] [0mFOR for null
[33m[your_program] [0mIDENTIFIER VAR null
[33m[your_program] [0mFALSE false null
[33m[your_program] [0mWHILE while null
[33m[your_program] [0mAND and null
[33m[your_program] [0mIDENTIFIER SUPER null
[33m[your_program] [0mIDENTIFIER OR null
[33m[your_program] [0mEOF  null
[33m[tester::#PQ5] [test-2] [0m[92m✓ 33 line(s) match on stdout[0m
[33m[tester::#PQ5] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PQ5] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#PQ5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PQ5] [test-3.lox] [0mvar greeting = "Hello"
[33m[tester::#PQ5] [test-3.lox] [0mif (greeting == "Hello") {
[33m[tester::#PQ5] [test-3.lox] [0m    return true
[33m[tester::#PQ5] [test-3.lox] [0m} else {
[33m[tester::#PQ5] [test-3.lox] [0m    return false
[33m[tester::#PQ5] [test-3.lox] [0m}
[33m[tester::#PQ5] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mVAR var null
[33m[your_program] [0mIDENTIFIER greeting null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mSTRING "Hello" Hello
[33m[your_program] [0mIF if null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mIDENTIFIER greeting null
[33m[your_program] [0mEQUAL_EQUAL == null
[33m[your_program] [0mSTRING "Hello" Hello
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRETURN return null
[33m[your_program] [0mTRUE true null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mELSE else null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRETURN return null
[33m[your_program] [0mFALSE false null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[tester::#PQ5] [test-3] [0m[92m✓ 20 line(s) match on stdout[0m
[33m[tester::#PQ5] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PQ5] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#PQ5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PQ5] [test-4.lox] [0mvar result = (a + b) > 7 or "Success" != "Failure" or x >= 5
[33m[tester::#PQ5] [test-4.lox] [0mwhile (result) {
[33m[tester::#PQ5] [test-4.lox] [0m    var counter = 0
[33m[tester::#PQ5] [test-4.lox] [0m    counter = counter + 1
[33m[tester::#PQ5] [test-4.lox] [0m    if (counter == 10) {
[33m[tester::#PQ5] [test-4.lox] [0m        return nil
[33m[tester::#PQ5] [test-4.lox] [0m    }
[33m[tester::#PQ5] [test-4.lox] [0m}
[33m[tester::#PQ5] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mVAR var null
[33m[your_program] [0mIDENTIFIER result null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mIDENTIFIER a null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mIDENTIFIER b null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mGREATER > null
[33m[your_program] [0mNUMBER 7 7.0
[33m[your_program] [0mOR or null
[33m[your_program] [0mSTRING "Success" Success
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mSTRING "Failure" Failure
[33m[your_program] [0mOR or null
[33m[your_program] [0mIDENTIFIER x null
[33m[your_program] [0mGREATER_EQUAL >= null
[33m[your_program] [0mNUMBER 5 5.0
[33m[your_program] [0mWHILE while null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mIDENTIFIER result null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mVAR var null
[33m[your_program] [0mIDENTIFIER counter null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mNUMBER 0 0.0
[33m[your_program] [0mIDENTIFIER counter null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mIDENTIFIER counter null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mNUMBER 1 1.0
[33m[your_program] [0mIF if null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mIDENTIFIER counter null
[33m[your_program] [0mEQUAL_EQUAL == null
[33m[your_program] [0mNUMBER 10 10.0
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRETURN return null
[33m[your_program] [0mNIL nil null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[tester::#PQ5] [test-4] [0m[92m✓ 44 line(s) match on stdout[0m
[33m[tester::#PQ5] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PQ5] [0m[92mTest passed.[0m

[33m[tester::#EY7] [0m[94mRunning tests for Stage #EY7 (Scanning: Identifiers)[0m
[33m[tester::#EY7] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#EY7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#EY7] [test-1.lox] [0mbar baz
[33m[tester::#EY7] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mIDENTIFIER bar null
[33m[your_program] [0mIDENTIFIER baz null
[33m[your_program] [0mEOF  null
[33m[tester::#EY7] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#EY7] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#EY7] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#EY7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#EY7] [test-2.lox] [0m_123foo world_ _hello 6az bar
[33m[tester::#EY7] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mIDENTIFIER _123foo null
[33m[your_program] [0mIDENTIFIER world_ null
[33m[your_program] [0mIDENTIFIER _hello null
[33m[your_program] [0mNUMBER 6 6.0
[33m[your_program] [0mIDENTIFIER az null
[33m[your_program] [0mIDENTIFIER bar null
[33m[your_program] [0mEOF  null
[33m[tester::#EY7] [test-2] [0m[92m✓ 7 line(s) match on stdout[0m
[33m[tester::#EY7] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#EY7] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#EY7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#EY7] [test-3.lox] [0mmessage = "Hello, World!"
[33m[tester::#EY7] [test-3.lox] [0mnumber = 123
[33m[tester::#EY7] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mIDENTIFIER message null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mSTRING "Hello, World!" Hello, World!
[33m[your_program] [0mIDENTIFIER number null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mNUMBER 123 123.0
[33m[your_program] [0mEOF  null
[33m[tester::#EY7] [test-3] [0m[92m✓ 7 line(s) match on stdout[0m
[33m[tester::#EY7] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#EY7] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#EY7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#EY7] [test-4.lox] [0m{
[33m[tester::#EY7] [test-4.lox] [0m[33m// This is a complex test case[0m
[33m[tester::#EY7] [test-4.lox] [0mstr1 = "Test"
[33m[tester::#EY7] [test-4.lox] [0mstr2 = "Case"
[33m[tester::#EY7] [test-4.lox] [0mnum1 = 100
[33m[tester::#EY7] [test-4.lox] [0mnum2 = 200.00
[33m[tester::#EY7] [test-4.lox] [0mresult = (str1 == str2) != ((num1 + num2) >= 300)
[33m[tester::#EY7] [test-4.lox] [0m}
[33m[tester::#EY7] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mIDENTIFIER str1 null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mSTRING "Test" Test
[33m[your_program] [0mIDENTIFIER str2 null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mSTRING "Case" Case
[33m[your_program] [0mIDENTIFIER num1 null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mNUMBER 100 100.0
[33m[your_program] [0mIDENTIFIER num2 null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mNUMBER 200.00 200.0
[33m[your_program] [0mIDENTIFIER result null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mIDENTIFIER str1 null
[33m[your_program] [0mEQUAL_EQUAL == null
[33m[your_program] [0mIDENTIFIER str2 null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mIDENTIFIER num1 null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mIDENTIFIER num2 null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mGREATER_EQUAL >= null
[33m[your_program] [0mNUMBER 300 300.0
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[tester::#EY7] [test-4] [0m[92m✓ 32 line(s) match on stdout[0m
[33m[tester::#EY7] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#EY7] [0m[92mTest passed.[0m

[33m[tester::#KJ0] [0m[94mRunning tests for Stage #KJ0 (Scanning: Number literals)[0m
[33m[tester::#KJ0] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#KJ0] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#KJ0] [test-1.lox] [0m84
[33m[tester::#KJ0] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mNUMBER 84 84.0
[33m[your_program] [0mEOF  null
[33m[tester::#KJ0] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#KJ0] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#KJ0] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#KJ0] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#KJ0] [test-2.lox] [0m2224.9310
[33m[tester::#KJ0] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mNUMBER 2224.9310 2224.931
[33m[your_program] [0mEOF  null
[33m[tester::#KJ0] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#KJ0] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#KJ0] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#KJ0] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#KJ0] [test-3.lox] [0m54.0000
[33m[tester::#KJ0] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mNUMBER 54.0000 54.0
[33m[your_program] [0mEOF  null
[33m[tester::#KJ0] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#KJ0] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#KJ0] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#KJ0] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#KJ0] [test-4.lox] [0m(51+15) > 50 != ("Success" != "Failure") != (72 >= 90)
[33m[tester::#KJ0] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mNUMBER 51 51.0
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mNUMBER 15 15.0
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mGREATER > null
[33m[your_program] [0mNUMBER 50 50.0
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mSTRING "Success" Success
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mSTRING "Failure" Failure
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mNUMBER 72 72.0
[33m[your_program] [0mGREATER_EQUAL >= null
[33m[your_program] [0mNUMBER 90 90.0
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[tester::#KJ0] [test-4] [0m[92m✓ 20 line(s) match on stdout[0m
[33m[tester::#KJ0] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#KJ0] [0m[92mTest passed.[0m

[33m[tester::#UE7] [0m[94mRunning tests for Stage #UE7 (Scanning: String literals)[0m
[33m[tester::#UE7] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#UE7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#UE7] [test-1.lox] [0m"hello"
[33m[tester::#UE7] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mSTRING "hello" hello
[33m[your_program] [0mEOF  null
[33m[tester::#UE7] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#UE7] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#UE7] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#UE7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#UE7] [test-2.lox] [0m"world" - "unterminated
[33m[tester::#UE7] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mSTRING "world" world
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mEOF  null
[33m[your_program] [0m[line 1] Error: Unterminated string.
[33m[tester::#UE7] [test-2] [0m[92m✓ 1 line(s) match on stderr[0m
[33m[tester::#UE7] [test-2] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#UE7] [test-2] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#UE7] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#UE7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#UE7] [test-3.lox] [0m"foo <|TAB|>bar 123 [33m// hello world!"[0m
[33m[tester::#UE7] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mSTRING "foo 	bar 123 // hello world!" foo 	bar 123 // hello world!
[33m[your_program] [0mEOF  null
[33m[tester::#UE7] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#UE7] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#UE7] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#UE7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#UE7] [test-4.lox] [0m("baz"+"hello") != "other_string"
[33m[tester::#UE7] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mSTRING "baz" baz
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mSTRING "hello" hello
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mSTRING "other_string" other_string
[33m[your_program] [0mEOF  null
[33m[tester::#UE7] [test-4] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[tester::#UE7] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#UE7] [0m[92mTest passed.[0m

[33m[tester::#TZ7] [0m[94mRunning tests for Stage #TZ7 (Scanning: Multi-line errors)[0m
[33m[tester::#TZ7] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#TZ7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#TZ7] [test-1.lox] [0m()
[33m[tester::#TZ7] [test-1.lox] [0m<|TAB|>@
[33m[tester::#TZ7] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[your_program] [0m[line 2] Error: Unexpected character: @
[33m[tester::#TZ7] [test-1] [0m[92m✓ 1 line(s) match on stderr[0m
[33m[tester::#TZ7] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#TZ7] [test-1] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#TZ7] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#TZ7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#TZ7] [test-2.lox] [0m
[33m[tester::#TZ7] [test-2.lox] [0m# $
[33m[tester::#TZ7] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m[line 2] Error: Unexpected character: #
[33m[your_program] [0m[line 2] Error: Unexpected character: $
[33m[your_program] [0mEOF  null
[33m[tester::#TZ7] [test-2] [0m[92m✓ 2 line(s) match on stderr[0m
[33m[tester::#TZ7] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#TZ7] [test-2] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#TZ7] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#TZ7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#TZ7] [test-3.lox] [0m()  #<|TAB|>{}
[33m[tester::#TZ7] [test-3.lox] [0m@
[33m[tester::#TZ7] [test-3.lox] [0m$
[33m[tester::#TZ7] [test-3.lox] [0m+++
[33m[tester::#TZ7] [test-3.lox] [0m[33m// Let's Go![0m
[33m[tester::#TZ7] [test-3.lox] [0m+++
[33m[tester::#TZ7] [test-3.lox] [0m#
[33m[tester::#TZ7] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mEOF  null
[33m[your_program] [0m[line 1] Error: Unexpected character: #
[33m[your_program] [0m[line 2] Error: Unexpected character: @
[33m[your_program] [0m[line 3] Error: Unexpected character: $
[33m[your_program] [0m[line 7] Error: Unexpected character: #
[33m[tester::#TZ7] [test-3] [0m[92m✓ 4 line(s) match on stderr[0m
[33m[tester::#TZ7] [test-3] [0m[92m✓ 11 line(s) match on stdout[0m
[33m[tester::#TZ7] [test-3] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#TZ7] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#TZ7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#TZ7] [test-4.lox] [0m({- #})
[33m[tester::#TZ7] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m[line 1] Error: Unexpected character: #
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[tester::#TZ7] [test-4] [0m[92m✓ 1 line(s) match on stderr[0m
[33m[tester::#TZ7] [test-4] [0m[92m✓ 6 line(s) match on stdout[0m
[33m[tester::#TZ7] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#TZ7] [0m[92mTest passed.[0m

[33m[tester::#ER2] [0m[94mRunning tests for Stage #ER2 (Scanning: Whitespace)[0m
[33m[tester::#ER2] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#ER2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ER2] [test-1.lox] [0m<|SPACE|>
[33m[tester::#ER2] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mEOF  null
[33m[tester::#ER2] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#ER2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ER2] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#ER2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ER2] [test-2.lox] [0m<|SPACE|><|TAB|>
[33m[tester::#ER2] [test-2.lox] [0m<|SPACE|>
[33m[tester::#ER2] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mEOF  null
[33m[tester::#ER2] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#ER2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ER2] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#ER2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ER2] [test-3.lox] [0m{<|SPACE|><|TAB|>}
[33m[tester::#ER2] [test-3.lox] [0m((;.<|TAB|>*-))
[33m[tester::#ER2] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mSEMICOLON ; null
[33m[your_program] [0mDOT . null
[33m[your_program] [0mSTAR * null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[tester::#ER2] [test-3] [0m[92m✓ 11 line(s) match on stdout[0m
[33m[tester::#ER2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ER2] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#ER2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ER2] [test-4.lox] [0m{<|TAB|>
[33m[tester::#ER2] [test-4.lox] [0m<|TAB|>
[33m[tester::#ER2] [test-4.lox] [0m<|SPACE|>}
[33m[tester::#ER2] [test-4.lox] [0m((<|TAB|>;,>-))
[33m[tester::#ER2] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mSEMICOLON ; null
[33m[your_program] [0mCOMMA , null
[33m[your_program] [0mGREATER > null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[tester::#ER2] [test-4] [0m[92m✓ 11 line(s) match on stdout[0m
[33m[tester::#ER2] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ER2] [0m[92mTest passed.[0m

[33m[tester::#ML2] [0m[94mRunning tests for Stage #ML2 (Scanning: Division operator & comments)[0m
[33m[tester::#ML2] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#ML2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ML2] [test-1.lox] [0m[33m//Comment[0m
[33m[tester::#ML2] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mEOF  null
[33m[your_program] [0mLogs from your program will appear here!
[33m[tester::#ML2] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#ML2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ML2] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#ML2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ML2] [test-2.lox] [0m([33m///Unicode:£§᯽☺♣)[0m
[33m[tester::#ML2] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mEOF  null
[33m[tester::#ML2] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#ML2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ML2] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#ML2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ML2] [test-3.lox] [0m/
[33m[tester::#ML2] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mSLASH / null
[33m[your_program] [0mEOF  null
[33m[tester::#ML2] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#ML2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ML2] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#ML2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ML2] [test-4.lox] [0m({(*<=!=)})[33m//Comment[0m
[33m[tester::#ML2] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mSTAR * null
[33m[your_program] [0mLESS_EQUAL <= null
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[tester::#ML2] [test-4] [0m[92m✓ 10 line(s) match on stdout[0m
[33m[tester::#ML2] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ML2] [0m[92mTest passed.[0m

[33m[tester::#ET2] [0m[94mRunning tests for Stage #ET2 (Scanning: Relational operators)[0m
[33m[tester::#ET2] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#ET2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ET2] [test-1.lox] [0m>=
[33m[tester::#ET2] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mGREATER_EQUAL >= null
[33m[your_program] [0mEOF  null
[33m[tester::#ET2] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#ET2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ET2] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#ET2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ET2] [test-2.lox] [0m<<<=>>>=
[33m[tester::#ET2] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLESS < null
[33m[your_program] [0mLESS < null
[33m[your_program] [0mLESS_EQUAL <= null
[33m[your_program] [0mGREATER > null
[33m[your_program] [0mGREATER > null
[33m[your_program] [0mGREATER_EQUAL >= null
[33m[your_program] [0mEOF  null
[33m[tester::#ET2] [test-2] [0m[92m✓ 7 line(s) match on stdout[0m
[33m[tester::#ET2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ET2] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#ET2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ET2] [test-3.lox] [0m>=><=<=>=
[33m[tester::#ET2] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mGREATER_EQUAL >= null
[33m[your_program] [0mGREATER > null
[33m[your_program] [0mLESS_EQUAL <= null
[33m[your_program] [0mLESS_EQUAL <= null
[33m[your_program] [0mGREATER_EQUAL >= null
[33m[your_program] [0mEOF  null
[33m[tester::#ET2] [test-3] [0m[92m✓ 6 line(s) match on stdout[0m
[33m[tester::#ET2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ET2] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#ET2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ET2] [test-4.lox] [0m(){=>=>}
[33m[tester::#ET2] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mGREATER_EQUAL >= null
[33m[your_program] [0mGREATER > null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[tester::#ET2] [test-4] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[tester::#ET2] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#ET2] [0m[92mTest passed.[0m

[33m[tester::#BU3] [0m[94mRunning tests for Stage #BU3 (Scanning: Negation & inequality operators)[0m
[33m[tester::#BU3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#BU3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BU3] [test-1.lox] [0m!=
[33m[tester::#BU3] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mEOF  null
[33m[tester::#BU3] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#BU3] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BU3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#BU3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BU3] [test-2.lox] [0m!!===
[33m[tester::#BU3] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mBANG ! null
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mEQUAL_EQUAL == null
[33m[your_program] [0mEOF  null
[33m[tester::#BU3] [test-2] [0m[92m✓ 4 line(s) match on stdout[0m
[33m[tester::#BU3] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BU3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#BU3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BU3] [test-3.lox] [0m!{!}(!===)=
[33m[tester::#BU3] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mBANG ! null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mBANG ! null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mEQUAL_EQUAL == null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mEOF  null
[33m[tester::#BU3] [test-3] [0m[92m✓ 10 line(s) match on stdout[0m
[33m[tester::#BU3] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BU3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#BU3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BU3] [test-4.lox] [0m{(!#!=$@)}
[33m[tester::#BU3] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mBANG ! null
[33m[your_program] [0mBANG_EQUAL != null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[your_program] [0m[line 1] Error: Unexpected character: #
[33m[your_program] [0m[line 1] Error: Unexpected character: $
[33m[your_program] [0m[line 1] Error: Unexpected character: @
[33m[tester::#BU3] [test-4] [0m[92m✓ 3 line(s) match on stderr[0m
[33m[tester::#BU3] [test-4] [0m[92m✓ 7 line(s) match on stdout[0m
[33m[tester::#BU3] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#BU3] [0m[92mTest passed.[0m

[33m[tester::#MP7] [0m[94mRunning tests for Stage #MP7 (Scanning: Assignment & equality Operators)[0m
[33m[tester::#MP7] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#MP7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#MP7] [test-1.lox] [0m=
[33m[tester::#MP7] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mEOF  null
[33m[tester::#MP7] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#MP7] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#MP7] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#MP7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#MP7] [test-2.lox] [0m==
[33m[tester::#MP7] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mEQUAL_EQUAL == null
[33m[your_program] [0mEOF  null
[33m[tester::#MP7] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#MP7] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#MP7] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#MP7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#MP7] [test-3.lox] [0m({=}){==}
[33m[tester::#MP7] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mEQUAL = null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mEQUAL_EQUAL == null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[tester::#MP7] [test-3] [0m[92m✓ 9 line(s) match on stdout[0m
[33m[tester::#MP7] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#MP7] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#MP7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#MP7] [test-4.lox] [0m((%$==@#))
[33m[tester::#MP7] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mEQUAL_EQUAL == null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[your_program] [0m[line 1] Error: Unexpected character: %
[33m[your_program] [0m[line 1] Error: Unexpected character: $
[33m[your_program] [0m[line 1] Error: Unexpected character: @
[33m[your_program] [0m[line 1] Error: Unexpected character: #
[33m[tester::#MP7] [test-4] [0m[92m✓ 4 line(s) match on stderr[0m
[33m[tester::#MP7] [test-4] [0m[92m✓ 6 line(s) match on stdout[0m
[33m[tester::#MP7] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#MP7] [0m[92mTest passed.[0m

[33m[tester::#EA6] [0m[94mRunning tests for Stage #EA6 (Scanning: Lexical errors)[0m
[33m[tester::#EA6] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#EA6] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#EA6] [test-1.lox] [0m@
[33m[tester::#EA6] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0m[line 1] Error: Unexpected character: @
[33m[your_program] [0mEOF  null
[33m[tester::#EA6] [test-1] [0m[92m✓ 1 line(s) match on stderr[0m
[33m[tester::#EA6] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#EA6] [test-1] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#EA6] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#EA6] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#EA6] [test-2.lox] [0m,.$(#
[33m[tester::#EA6] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mCOMMA , null
[33m[your_program] [0mDOT . null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mEOF  null
[33m[your_program] [0m[line 1] Error: Unexpected character: $
[33m[your_program] [0m[line 1] Error: Unexpected character: #
[33m[tester::#EA6] [test-2] [0m[92m✓ 2 line(s) match on stderr[0m
[33m[tester::#EA6] [test-2] [0m[92m✓ 4 line(s) match on stdout[0m
[33m[tester::#EA6] [test-2] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#EA6] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#EA6] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#EA6] [test-3.lox] [0m@%$$#
[33m[tester::#EA6] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mEOF  null
[33m[your_program] [0m[line 1] Error: Unexpected character: @
[33m[your_program] [0m[line 1] Error: Unexpected character: %
[33m[your_program] [0m[line 1] Error: Unexpected character: $
[33m[your_program] [0m[line 1] Error: Unexpected character: $
[33m[your_program] [0m[line 1] Error: Unexpected character: #
[33m[tester::#EA6] [test-3] [0m[92m✓ 5 line(s) match on stderr[0m
[33m[tester::#EA6] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#EA6] [test-3] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#EA6] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#EA6] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#EA6] [test-4.lox] [0m{(#$@%+,.)}
[33m[tester::#EA6] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mCOMMA , null
[33m[your_program] [0mDOT . null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[your_program] [0m[line 1] Error: Unexpected character: #
[33m[your_program] [0m[line 1] Error: Unexpected character: $
[33m[your_program] [0m[line 1] Error: Unexpected character: @
[33m[your_program] [0m[line 1] Error: Unexpected character: %
[33m[tester::#EA6] [test-4] [0m[92m✓ 4 line(s) match on stderr[0m
[33m[tester::#EA6] [test-4] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[tester::#EA6] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#EA6] [0m[92mTest passed.[0m

[33m[tester::#XC5] [0m[94mRunning tests for Stage #XC5 (Scanning: Other single-character tokens)[0m
[33m[tester::#XC5] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#XC5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XC5] [test-1.lox] [0m+-
[33m[tester::#XC5] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mEOF  null
[33m[tester::#XC5] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#XC5] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XC5] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#XC5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XC5] [test-2.lox] [0m++--**..,,;;
[33m[tester::#XC5] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mSTAR * null
[33m[your_program] [0mSTAR * null
[33m[your_program] [0mDOT . null
[33m[your_program] [0mDOT . null
[33m[your_program] [0mCOMMA , null
[33m[your_program] [0mCOMMA , null
[33m[your_program] [0mSEMICOLON ; null
[33m[your_program] [0mSEMICOLON ; null
[33m[your_program] [0mEOF  null
[33m[tester::#XC5] [test-2] [0m[92m✓ 13 line(s) match on stdout[0m
[33m[tester::#XC5] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XC5] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#XC5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XC5] [test-3.lox] [0m.;*.-*-
[33m[tester::#XC5] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mDOT . null
[33m[your_program] [0mSEMICOLON ; null
[33m[your_program] [0mSTAR * null
[33m[your_program] [0mDOT . null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mSTAR * null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mEOF  null
[33m[tester::#XC5] [test-3] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[tester::#XC5] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XC5] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#XC5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XC5] [test-4.lox] [0m({+;,.-})
[33m[tester::#XC5] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mPLUS + null
[33m[your_program] [0mSEMICOLON ; null
[33m[your_program] [0mCOMMA , null
[33m[your_program] [0mDOT . null
[33m[your_program] [0mMINUS - null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[tester::#XC5] [test-4] [0m[92m✓ 10 line(s) match on stdout[0m
[33m[tester::#XC5] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XC5] [0m[92mTest passed.[0m

[33m[tester::#OE8] [0m[94mRunning tests for Stage #OE8 (Scanning: Braces)[0m
[33m[tester::#OE8] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#OE8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE8] [test-1.lox] [0m}
[33m[tester::#OE8] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[tester::#OE8] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#OE8] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE8] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#OE8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE8] [test-2.lox] [0m{{}}
[33m[tester::#OE8] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[tester::#OE8] [test-2] [0m[92m✓ 5 line(s) match on stdout[0m
[33m[tester::#OE8] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE8] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#OE8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE8] [test-3.lox] [0m{{{}}
[33m[tester::#OE8] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mEOF  null
[33m[tester::#OE8] [test-3] [0m[92m✓ 6 line(s) match on stdout[0m
[33m[tester::#OE8] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE8] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#OE8] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE8] [test-4.lox] [0m)}(}{)(
[33m[tester::#OE8] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mRIGHT_BRACE } null
[33m[your_program] [0mLEFT_BRACE { null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mEOF  null
[33m[tester::#OE8] [test-4] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[tester::#OE8] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE8] [0m[92mTest passed.[0m

[33m[tester::#OL4] [0m[94mRunning tests for Stage #OL4 (Scanning: Parentheses)[0m
[33m[tester::#OL4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#OL4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OL4] [test-1.lox] [0m(
[33m[tester::#OL4] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mEOF  null
[33m[tester::#OL4] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#OL4] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OL4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#OL4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OL4] [test-2.lox] [0m))
[33m[tester::#OL4] [test-2] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mEOF  null
[33m[tester::#OL4] [test-2] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#OL4] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OL4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#OL4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OL4] [test-3.lox] [0m(())(
[33m[tester::#OL4] [test-3] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mEOF  null
[33m[tester::#OL4] [test-3] [0m[92m✓ 6 line(s) match on stdout[0m
[33m[tester::#OL4] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OL4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#OL4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OL4] [test-4.lox] [0m(()())(
[33m[tester::#OL4] [test-4] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mRIGHT_PAREN ) null
[33m[your_program] [0mLEFT_PAREN ( null
[33m[your_program] [0mEOF  null
[33m[tester::#OL4] [test-4] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[tester::#OL4] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OL4] [0m[92mTest passed.[0m

[33m[tester::#RY8] [0m[94mRunning tests for Stage #RY8 (Scanning: Empty file)[0m
[33m[tester::#RY8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#RY8] [test-1.lox] [0m<|EMPTY FILE|>
[33m[tester::#RY8] [test-1] [0m[94m$ ./your_program.sh tokenize test.lox[0m
[33m[your_program] [0mLogs from your program will appear here!
[33m[your_program] [0mEOF  null
[33m[tester::#RY8] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#RY8] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#RY8] [0m[92mTest passed.[0m

Test passed. Congrats!

[32mMark step as complete: https://app.codecrafters.io/courses/interpreter[0m
