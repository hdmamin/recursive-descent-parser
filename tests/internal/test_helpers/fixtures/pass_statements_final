Debug = true

[33m[tester::#XY1] [0m[94mRunning tests for Stage #XY1 (xy1)[0m
[33m[tester::#XY1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#XY1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XY1] [test-1.lox] [0mprint false;
[33m[tester::#XY1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[tester::#XY1] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XY1] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XY1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#XY1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XY1] [test-2.lox] [0m[33m// Concatenation of strings should work[0m
[33m[tester::#XY1] [test-2.lox] [0mprint "quz" + "hello" + "baz";
[33m[tester::#XY1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mquzhellobaz
[33m[tester::#XY1] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XY1] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XY1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#XY1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XY1] [test-3.lox] [0mprint (92 * 2 + 96 * 2) / (2);
[33m[tester::#XY1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m188
[33m[tester::#XY1] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XY1] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#XY1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#XY1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XY1] [test-4.lox] [0m[33m// Print statements expect an expression[0m
[33m[tester::#XY1] [test-4.lox] [0mprint; [33m// expect compile error[0m
[33m[tester::#XY1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 2] Error at ';': Expect expression.
[33m[tester::#XY1] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#XY1] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#XY1] [0m[92mTest passed.[0m

[33m[tester::#OE4] [0m[94mRunning tests for Stage #OE4 (oe4)[0m
[33m[tester::#OE4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#OE4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE4] [test-1.lox] [0m[33m// Concatenation of strings should work[0m
[33m[tester::#OE4] [test-1.lox] [0mprint "hello" + "foo" + "world";
[33m[tester::#OE4] [test-1.lox] [0mprint 34 - 90;
[33m[tester::#OE4] [test-1.lox] [0mprint "world" == "quz";
[33m[tester::#OE4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mhellofooworld
[33m[your_program] [0m-56
[33m[your_program] [0mfalse
[33m[tester::#OE4] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#OE4] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#OE4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE4] [test-2.lox] [0m[33m// Multiple statements in a single line should work[0m
[33m[tester::#OE4] [test-2.lox] [0mprint "bar"; print true;
[33m[tester::#OE4] [test-2.lox] [0mprint true;
[33m[tester::#OE4] [test-2.lox] [0mprint "world"; print 28;
[33m[tester::#OE4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbar
[33m[your_program] [0mtrue
[33m[your_program] [0mtrue
[33m[your_program] [0mworld
[33m[your_program] [0m28
[33m[tester::#OE4] [test-2] [0m[92m✓ 5 line(s) match on stdout[0m
[33m[tester::#OE4] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#OE4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE4] [test-3.lox] [0m[33m// Leading whitespace should be ignored[0m
[33m[tester::#OE4] [test-3.lox] [0mprint 17;
[33m[tester::#OE4] [test-3.lox] [0m    print 17 + 81;
[33m[tester::#OE4] [test-3.lox] [0m        print 17 + 81 + 52;
[33m[tester::#OE4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m17
[33m[your_program] [0m98
[33m[your_program] [0m150
[33m[tester::#OE4] [test-3] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#OE4] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#OE4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#OE4] [test-4.lox] [0mprint true != true;
[33m[tester::#OE4] [test-4.lox] [0m
[33m[tester::#OE4] [test-4.lox] [0m[33m// multi-line strings should be supported[0m
[33m[tester::#OE4] [test-4.lox] [0mprint "44
[33m[tester::#OE4] [test-4.lox] [0m84
[33m[tester::#OE4] [test-4.lox] [0m70
[33m[tester::#OE4] [test-4.lox] [0m";
[33m[tester::#OE4] [test-4.lox] [0m
[33m[tester::#OE4] [test-4.lox] [0mprint "There should be an empty line above this.";
[33m[tester::#OE4] [test-4.lox] [0m
[33m[tester::#OE4] [test-4.lox] [0mprint "(" + "" + ")";
[33m[tester::#OE4] [test-4.lox] [0m
[33m[tester::#OE4] [test-4.lox] [0m[33m// non-ascii characters should be supported[0m
[33m[tester::#OE4] [test-4.lox] [0mprint "non-ascii: ॐ";
[33m[tester::#OE4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[your_program] [0m44
[33m[your_program] [0m84
[33m[your_program] [0m70
[33m[your_program] [0m
[33m[your_program] [0mThere should be an empty line above this.
[33m[your_program] [0m()
[33m[your_program] [0mnon-ascii: ॐ
[33m[tester::#OE4] [test-4] [0m[92m✓ 8 line(s) match on stdout[0m
[33m[tester::#OE4] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#OE4] [0m[92mTest passed.[0m

[33m[tester::#FI3] [0m[94mRunning tests for Stage #FI3 (fi3)[0m
[33m[tester::#FI3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#FI3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FI3] [test-1.lox] [0m[33m// This program tests that statements are executed[0m
[33m[tester::#FI3] [test-1.lox] [0m[33m// even if they don't have any side effects[0m
[33m[tester::#FI3] [test-1.lox] [0m[33m// It also tests complex arithmetic expressions[0m
[33m[tester::#FI3] [test-1.lox] [0m[33m// and string concatenation[0m
[33m[tester::#FI3] [test-1.lox] [0m(74 + 46 - 10) > (42 - 74) * 2;
[33m[tester::#FI3] [test-1.lox] [0mprint !false;
[33m[tester::#FI3] [test-1.lox] [0m"quz" + "world" + "bar" == "quzworldbar";
[33m[tester::#FI3] [test-1.lox] [0mprint !false;
[33m[tester::#FI3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mtrue
[33m[your_program] [0mtrue
[33m[tester::#FI3] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#FI3] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FI3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#FI3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FI3] [test-2.lox] [0m[33m// This program tests statements that don't have[0m
[33m[tester::#FI3] [test-2.lox] [0m[33m// any side effects[0m
[33m[tester::#FI3] [test-2.lox] [0m53 - 31 >= -90 * 2 / 90 + 27;
[33m[tester::#FI3] [test-2.lox] [0mfalse == false;
[33m[tester::#FI3] [test-2.lox] [0m("world" == "hello") == ("quz" != "baz");
[33m[tester::#FI3] [test-2.lox] [0mprint false;
[33m[tester::#FI3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[tester::#FI3] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#FI3] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FI3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#FI3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FI3] [test-3.lox] [0m[33m// This program tests that the + operator is only[0m
[33m[tester::#FI3] [test-3.lox] [0m[33m// supported when both operands are numbers or[0m
[33m[tester::#FI3] [test-3.lox] [0m[33m// both are strings[0m
[33m[tester::#FI3] [test-3.lox] [0mprint "the expression below is invalid";
[33m[tester::#FI3] [test-3.lox] [0m62 + "quz";
[33m[tester::#FI3] [test-3.lox] [0mprint "this should not be printed";
[33m[tester::#FI3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mthe expression below is invalid
[33m[your_program] [0mOperands must be two numbers or two strings.
[33m[your_program] [0m[line 5]
[33m[tester::#FI3] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#FI3] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#FI3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#FI3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FI3] [test-4.lox] [0m[33m// This program tests that the * operator is only[0m
[33m[tester::#FI3] [test-4.lox] [0m[33m// supported when both operands are numbers[0m
[33m[tester::#FI3] [test-4.lox] [0mprint "50" + "hello";
[33m[tester::#FI3] [test-4.lox] [0mprint false * (97 + 23);
[33m[tester::#FI3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m50hello
[33m[your_program] [0mOperands must be numbers.
[33m[your_program] [0m[line 4]
[33m[tester::#FI3] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#FI3] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#FI3] [0m[92mTest passed.[0m

[33m[tester::#YG2] [0m[94mRunning tests for Stage #YG2 (yg2)[0m
[33m[tester::#YG2] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#YG2] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YG2] [test-1.lox] [0m[33m// This program tests that variables are[0m
[33m[tester::#YG2] [test-1.lox] [0m[33m// initialized to the correct value[0m
[33m[tester::#YG2] [test-1.lox] [0mvar baz = 10;
[33m[tester::#YG2] [test-1.lox] [0mprint baz;
[33m[tester::#YG2] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m10
[33m[tester::#YG2] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YG2] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YG2] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#YG2] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YG2] [test-2.lox] [0m[33m// This program declares multiple variables and[0m
[33m[tester::#YG2] [test-2.lox] [0m[33m// prints the result of arithmetic operations on[0m
[33m[tester::#YG2] [test-2.lox] [0m[33m// them[0m
[33m[tester::#YG2] [test-2.lox] [0mvar foo = 17;
[33m[tester::#YG2] [test-2.lox] [0mvar bar = 17;
[33m[tester::#YG2] [test-2.lox] [0mprint foo + bar;
[33m[tester::#YG2] [test-2.lox] [0mvar quz = 17;
[33m[tester::#YG2] [test-2.lox] [0mprint foo + bar + quz;
[33m[tester::#YG2] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m34
[33m[your_program] [0m51
[33m[tester::#YG2] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#YG2] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YG2] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#YG2] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YG2] [test-3.lox] [0m[33m// This program assigns the result of an[0m
[33m[tester::#YG2] [test-3.lox] [0m[33m// arithmetic expression to a variable[0m
[33m[tester::#YG2] [test-3.lox] [0m[33m// Then it prints the value of the variable[0m
[33m[tester::#YG2] [test-3.lox] [0mvar quz = (8 * (68 + 68)) / 4 + 68;
[33m[tester::#YG2] [test-3.lox] [0mprint quz;
[33m[tester::#YG2] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m340
[33m[tester::#YG2] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YG2] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YG2] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#YG2] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#YG2] [test-4.lox] [0m[33m// This program declares variables and performs[0m
[33m[tester::#YG2] [test-4.lox] [0m[33m// operations on them[0m
[33m[tester::#YG2] [test-4.lox] [0m[33m// Finally it prints the result of the operations[0m
[33m[tester::#YG2] [test-4.lox] [0mvar bar = 66;
[33m[tester::#YG2] [test-4.lox] [0mvar foo = bar;
[33m[tester::#YG2] [test-4.lox] [0mprint foo + bar;
[33m[tester::#YG2] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m132
[33m[tester::#YG2] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#YG2] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#YG2] [0m[92mTest passed.[0m

[33m[tester::#SV7] [0m[94mRunning tests for Stage #SV7 (sv7)[0m
[33m[tester::#SV7] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#SV7] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SV7] [test-1.lox] [0m[33m// This program tries to access a variable before[0m
[33m[tester::#SV7] [test-1.lox] [0m[33m// it is declared[0m
[33m[tester::#SV7] [test-1.lox] [0m[33m// It leads to a runtime error[0m
[33m[tester::#SV7] [test-1.lox] [0mprint 45;
[33m[tester::#SV7] [test-1.lox] [0mprint x;
[33m[tester::#SV7] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m45
[33m[your_program] [0mUndefined variable 'x'.
[33m[your_program] [0m[line 5]
[33m[tester::#SV7] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SV7] [test-1] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#SV7] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#SV7] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SV7] [test-2.lox] [0m[33m// This program tries to access a variable before[0m
[33m[tester::#SV7] [test-2.lox] [0m[33m// it is declared[0m
[33m[tester::#SV7] [test-2.lox] [0m[33m// It leads to a runtime error[0m
[33m[tester::#SV7] [test-2.lox] [0mvar world = 16;
[33m[tester::#SV7] [test-2.lox] [0mprint baz;
[33m[tester::#SV7] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'baz'.
[33m[your_program] [0m[line 5]
[33m[tester::#SV7] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SV7] [test-2] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#SV7] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#SV7] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SV7] [test-3.lox] [0m[33m// This program tries to access a variable before[0m
[33m[tester::#SV7] [test-3.lox] [0m[33m// it is declared[0m
[33m[tester::#SV7] [test-3.lox] [0m[33m// It leads to a runtime error[0m
[33m[tester::#SV7] [test-3.lox] [0mvar world = 47;
[33m[tester::#SV7] [test-3.lox] [0mvar result = (world + foo) / bar;
[33m[tester::#SV7] [test-3.lox] [0mprint result;
[33m[tester::#SV7] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'foo'.
[33m[your_program] [0m[line 5]
[33m[tester::#SV7] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SV7] [test-3] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#SV7] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#SV7] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#SV7] [test-4.lox] [0m[33m// This program tries to access a variable before[0m
[33m[tester::#SV7] [test-4.lox] [0m[33m// it is declared[0m
[33m[tester::#SV7] [test-4.lox] [0m[33m// It leads to a runtime error[0m
[33m[tester::#SV7] [test-4.lox] [0mvar quz = 88;
[33m[tester::#SV7] [test-4.lox] [0mvar hello = 96;
[33m[tester::#SV7] [test-4.lox] [0mvar foo = 36;
[33m[tester::#SV7] [test-4.lox] [0mprint quz + hello + foo + bar; print 53;
[33m[tester::#SV7] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'bar'.
[33m[your_program] [0m[line 7]
[33m[tester::#SV7] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#SV7] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#SV7] [0m[92mTest passed.[0m

[33m[tester::#BC1] [0m[94mRunning tests for Stage #BC1 (bc1)[0m
[33m[tester::#BC1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#BC1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BC1] [test-1.lox] [0m[33m// This program declares a variable but doesn't[0m
[33m[tester::#BC1] [test-1.lox] [0m[33m// initialize it[0m
[33m[tester::#BC1] [test-1.lox] [0m[33m// It prints the variable's value, which should be[0m
[33m[tester::#BC1] [test-1.lox] [0m[33m// nil[0m
[33m[tester::#BC1] [test-1.lox] [0mvar hello;
[33m[tester::#BC1] [test-1.lox] [0mprint hello;
[33m[tester::#BC1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mnil
[33m[tester::#BC1] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BC1] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BC1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#BC1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BC1] [test-2.lox] [0m[33m// This program declares a variable but doesn't[0m
[33m[tester::#BC1] [test-2.lox] [0m[33m// initialize it[0m
[33m[tester::#BC1] [test-2.lox] [0m[33m// It prints the variable's value[0m
[33m[tester::#BC1] [test-2.lox] [0mvar foo = "baz";
[33m[tester::#BC1] [test-2.lox] [0mvar bar;
[33m[tester::#BC1] [test-2.lox] [0mprint bar;
[33m[tester::#BC1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mnil
[33m[tester::#BC1] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BC1] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BC1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#BC1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BC1] [test-3.lox] [0m[33m// This program declares a variable but doesn't[0m
[33m[tester::#BC1] [test-3.lox] [0m[33m// initialize it[0m
[33m[tester::#BC1] [test-3.lox] [0m[33m// It prints the variable's value[0m
[33m[tester::#BC1] [test-3.lox] [0mvar quz = 25;
[33m[tester::#BC1] [test-3.lox] [0mvar hello;
[33m[tester::#BC1] [test-3.lox] [0mvar foo;
[33m[tester::#BC1] [test-3.lox] [0mprint hello;
[33m[tester::#BC1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mnil
[33m[tester::#BC1] [test-3] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#BC1] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BC1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#BC1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BC1] [test-4.lox] [0m[33m// This program declares a variable but doesn't[0m
[33m[tester::#BC1] [test-4.lox] [0m[33m// initialize it[0m
[33m[tester::#BC1] [test-4.lox] [0m[33m// It prints the variable's value[0m
[33m[tester::#BC1] [test-4.lox] [0mvar quz = 95 + 71 * 16;
[33m[tester::#BC1] [test-4.lox] [0mprint quz;
[33m[tester::#BC1] [test-4.lox] [0mvar baz = 71 * 16;
[33m[tester::#BC1] [test-4.lox] [0mprint quz + baz;
[33m[tester::#BC1] [test-4.lox] [0mvar foo;
[33m[tester::#BC1] [test-4.lox] [0mprint foo;
[33m[tester::#BC1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1231
[33m[your_program] [0m2367
[33m[your_program] [0mnil
[33m[tester::#BC1] [test-4] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#BC1] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#BC1] [0m[92mTest passed.[0m

[33m[tester::#DW9] [0m[94mRunning tests for Stage #DW9 (dw9)[0m
[33m[tester::#DW9] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#DW9] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DW9] [test-1.lox] [0mvar baz = "before";
[33m[tester::#DW9] [test-1.lox] [0mprint baz;
[33m[tester::#DW9] [test-1.lox] [0mvar baz = "after";
[33m[tester::#DW9] [test-1.lox] [0mprint baz;
[33m[tester::#DW9] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbefore
[33m[your_program] [0mafter
[33m[tester::#DW9] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#DW9] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DW9] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#DW9] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DW9] [test-2.lox] [0mvar world = "after";
[33m[tester::#DW9] [test-2.lox] [0mvar world = "before";
[33m[tester::#DW9] [test-2.lox] [0m[33m// Using a previously declared variable's value to[0m
[33m[tester::#DW9] [test-2.lox] [0m[33m// initialize a new variable should work[0m
[33m[tester::#DW9] [test-2.lox] [0mvar world = world;
[33m[tester::#DW9] [test-2.lox] [0mprint world;
[33m[tester::#DW9] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbefore
[33m[tester::#DW9] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#DW9] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DW9] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#DW9] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DW9] [test-3.lox] [0m[33m// This program declares and initializes multiple[0m
[33m[tester::#DW9] [test-3.lox] [0m[33m// variables and prints their values[0m
[33m[tester::#DW9] [test-3.lox] [0mvar bar = 2;
[33m[tester::#DW9] [test-3.lox] [0mprint bar;
[33m[tester::#DW9] [test-3.lox] [0mvar bar = 3;
[33m[tester::#DW9] [test-3.lox] [0mprint bar;
[33m[tester::#DW9] [test-3.lox] [0mvar hello = 5;
[33m[tester::#DW9] [test-3.lox] [0mprint hello;
[33m[tester::#DW9] [test-3.lox] [0mvar bar = hello;
[33m[tester::#DW9] [test-3.lox] [0mprint bar;
[33m[tester::#DW9] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m2
[33m[your_program] [0m3
[33m[your_program] [0m5
[33m[your_program] [0m5
[33m[tester::#DW9] [test-3] [0m[92m✓ 4 line(s) match on stdout[0m
[33m[tester::#DW9] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#DW9] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#DW9] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#DW9] [test-4.lox] [0m[33m// As baz is not declared before[0m
[33m[tester::#DW9] [test-4.lox] [0mvar hello = baz; [33m// expect runtime error[0m
[33m[tester::#DW9] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mUndefined variable 'baz'.
[33m[your_program] [0m[line 2]
[33m[tester::#DW9] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#DW9] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#DW9] [0m[92mTest passed.[0m

[33m[tester::#PL3] [0m[94mRunning tests for Stage #PL3 (pl3)[0m
[33m[tester::#PL3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#PL3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PL3] [test-1.lox] [0mvar baz;
[33m[tester::#PL3] [test-1.lox] [0mbaz = 1;
[33m[tester::#PL3] [test-1.lox] [0mprint baz;
[33m[tester::#PL3] [test-1.lox] [0m[33m// The assignment operator should return[0m
[33m[tester::#PL3] [test-1.lox] [0m[33m// the value that was assigned[0m
[33m[tester::#PL3] [test-1.lox] [0mprint baz = 2;
[33m[tester::#PL3] [test-1.lox] [0mprint baz;
[33m[tester::#PL3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[your_program] [0m2
[33m[tester::#PL3] [test-1] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#PL3] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PL3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#PL3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PL3] [test-2.lox] [0m[33m// This program tests that the assignment operator[0m
[33m[tester::#PL3] [test-2.lox] [0m[33m// works on any declared variable[0m
[33m[tester::#PL3] [test-2.lox] [0mvar bar = 87;
[33m[tester::#PL3] [test-2.lox] [0mvar world = 87;
[33m[tester::#PL3] [test-2.lox] [0mworld = bar;
[33m[tester::#PL3] [test-2.lox] [0mbar = world;
[33m[tester::#PL3] [test-2.lox] [0mprint bar + world;
[33m[tester::#PL3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m174
[33m[tester::#PL3] [test-2] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#PL3] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PL3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#PL3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PL3] [test-3.lox] [0mvar foo;
[33m[tester::#PL3] [test-3.lox] [0mvar baz;
[33m[tester::#PL3] [test-3.lox] [0m
[33m[tester::#PL3] [test-3.lox] [0m[33m// The assignment operator should return[0m
[33m[tester::#PL3] [test-3.lox] [0m[33m// the value that was assigned[0m
[33m[tester::#PL3] [test-3.lox] [0mfoo = baz = 50 + 13 * 62;
[33m[tester::#PL3] [test-3.lox] [0mprint foo;
[33m[tester::#PL3] [test-3.lox] [0mprint baz;
[33m[tester::#PL3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m856
[33m[your_program] [0m856
[33m[tester::#PL3] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#PL3] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PL3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#PL3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#PL3] [test-4.lox] [0mvar bar = 93;
[33m[tester::#PL3] [test-4.lox] [0mvar quz;
[33m[tester::#PL3] [test-4.lox] [0mvar foo;
[33m[tester::#PL3] [test-4.lox] [0m
[33m[tester::#PL3] [test-4.lox] [0m[33m// The assignment operator should return[0m
[33m[tester::#PL3] [test-4.lox] [0m[33m// the value that was assigned[0m
[33m[tester::#PL3] [test-4.lox] [0mbar = quz = foo = bar * 2;
[33m[tester::#PL3] [test-4.lox] [0mprint bar;
[33m[tester::#PL3] [test-4.lox] [0mprint quz;
[33m[tester::#PL3] [test-4.lox] [0mprint quz;
[33m[tester::#PL3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m186
[33m[your_program] [0m186
[33m[your_program] [0m186
[33m[tester::#PL3] [test-4] [0m[92m✓ 3 line(s) match on stdout[0m
[33m[tester::#PL3] [test-4] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#PL3] [0m[92mTest passed.[0m

[33m[tester::#VR5] [0m[94mRunning tests for Stage #VR5 (vr5)[0m
[33m[tester::#VR5] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#VR5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VR5] [test-1.lox] [0m[33m// This program tests that curly braces can be[0m
[33m[tester::#VR5] [test-1.lox] [0m[33m// used to group multiple statements into blocks[0m
[33m[tester::#VR5] [test-1.lox] [0m{
[33m[tester::#VR5] [test-1.lox] [0m    var hello = "foo";
[33m[tester::#VR5] [test-1.lox] [0m    print hello;
[33m[tester::#VR5] [test-1.lox] [0m}
[33m[tester::#VR5] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfoo
[33m[tester::#VR5] [test-1] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#VR5] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#VR5] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#VR5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VR5] [test-2.lox] [0m[33m// This program tests that blocks can be used[0m
[33m[tester::#VR5] [test-2.lox] [0m[33m// to group statements and variables[0m
[33m[tester::#VR5] [test-2.lox] [0m[33m// creating local scopes[0m
[33m[tester::#VR5] [test-2.lox] [0m{
[33m[tester::#VR5] [test-2.lox] [0m    var world = "before";
[33m[tester::#VR5] [test-2.lox] [0m    print world;
[33m[tester::#VR5] [test-2.lox] [0m}
[33m[tester::#VR5] [test-2.lox] [0m{
[33m[tester::#VR5] [test-2.lox] [0m    var world = "after";
[33m[tester::#VR5] [test-2.lox] [0m    print world;
[33m[tester::#VR5] [test-2.lox] [0m}
[33m[tester::#VR5] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbefore
[33m[your_program] [0mafter
[33m[tester::#VR5] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#VR5] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#VR5] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#VR5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VR5] [test-3.lox] [0m[33m// This program tests that scopes can be nested[0m
[33m[tester::#VR5] [test-3.lox] [0m{
[33m[tester::#VR5] [test-3.lox] [0m    var bar = 35;
[33m[tester::#VR5] [test-3.lox] [0m    {
[33m[tester::#VR5] [test-3.lox] [0m        var quz = 35;
[33m[tester::#VR5] [test-3.lox] [0m        print quz;
[33m[tester::#VR5] [test-3.lox] [0m    }
[33m[tester::#VR5] [test-3.lox] [0m    print bar;
[33m[tester::#VR5] [test-3.lox] [0m}
[33m[tester::#VR5] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m35
[33m[your_program] [0m35
[33m[tester::#VR5] [test-3] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#VR5] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#VR5] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#VR5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VR5] [test-4.lox] [0m{
[33m[tester::#VR5] [test-4.lox] [0m    var world = 68;
[33m[tester::#VR5] [test-4.lox] [0m    var hello = 68;
[33m[tester::#VR5] [test-4.lox] [0m    {
[33m[tester::#VR5] [test-4.lox] [0m        print world + hello;
[33m[tester::#VR5] [test-4.lox] [0m    [33m// Missing closing curly brace[0m
[33m[tester::#VR5] [test-4.lox] [0m    [33m// Expect compile error[0m
[33m[tester::#VR5] [test-4.lox] [0m}
[33m[tester::#VR5] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 8] Error at end: Expect '}' after block.
[33m[tester::#VR5] [test-4] [0m[92m✓ 1 line(s) match on stdout[0m
[33m[tester::#VR5] [test-4] [0m[92m✓ Received exit code 65.[0m
[33m[tester::#VR5] [0m[92mTest passed.[0m

[33m[tester::#FB4] [0m[94mRunning tests for Stage #FB4 (fb4)[0m
[33m[tester::#FB4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#FB4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FB4] [test-1.lox] [0mvar hello = (12 * 41) - 84;
[33m[tester::#FB4] [test-1.lox] [0m{
[33m[tester::#FB4] [test-1.lox] [0m    [33m// Local scope should be created[0m
[33m[tester::#FB4] [test-1.lox] [0m    var quz = "bar" + "14";
[33m[tester::#FB4] [test-1.lox] [0m    print quz;
[33m[tester::#FB4] [test-1.lox] [0m}
[33m[tester::#FB4] [test-1.lox] [0mprint hello;
[33m[tester::#FB4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbar14
[33m[your_program] [0m408
[33m[tester::#FB4] [test-1] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#FB4] [test-1] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FB4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#FB4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FB4] [test-2.lox] [0m[33m// This program tests variable shadowing[0m
[33m[tester::#FB4] [test-2.lox] [0m[33m// across nested scopes[0m
[33m[tester::#FB4] [test-2.lox] [0m{
[33m[tester::#FB4] [test-2.lox] [0m    var foo = "before";
[33m[tester::#FB4] [test-2.lox] [0m    {
[33m[tester::#FB4] [test-2.lox] [0m        var foo = "after";
[33m[tester::#FB4] [test-2.lox] [0m        print foo;
[33m[tester::#FB4] [test-2.lox] [0m    }
[33m[tester::#FB4] [test-2.lox] [0m    print foo;
[33m[tester::#FB4] [test-2.lox] [0m}
[33m[tester::#FB4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mafter
[33m[your_program] [0mbefore
[33m[tester::#FB4] [test-2] [0m[92m✓ 2 line(s) match on stdout[0m
[33m[tester::#FB4] [test-2] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FB4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#FB4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FB4] [test-3.lox] [0m[33m// This program creates nested scopes and tests[0m
[33m[tester::#FB4] [test-3.lox] [0m[33m// local scopes and variable shadowing[0m
[33m[tester::#FB4] [test-3.lox] [0mvar baz = "global baz";
[33m[tester::#FB4] [test-3.lox] [0mvar bar = "global bar";
[33m[tester::#FB4] [test-3.lox] [0mvar hello = "global hello";
[33m[tester::#FB4] [test-3.lox] [0m{
[33m[tester::#FB4] [test-3.lox] [0m  var baz = "outer baz";
[33m[tester::#FB4] [test-3.lox] [0m  var bar = "outer bar";
[33m[tester::#FB4] [test-3.lox] [0m  {
[33m[tester::#FB4] [test-3.lox] [0m    var baz = "inner baz";
[33m[tester::#FB4] [test-3.lox] [0m    print baz;
[33m[tester::#FB4] [test-3.lox] [0m    print bar;
[33m[tester::#FB4] [test-3.lox] [0m    print hello;
[33m[tester::#FB4] [test-3.lox] [0m  }
[33m[tester::#FB4] [test-3.lox] [0m  print baz;
[33m[tester::#FB4] [test-3.lox] [0m  print bar;
[33m[tester::#FB4] [test-3.lox] [0m  print hello;
[33m[tester::#FB4] [test-3.lox] [0m}
[33m[tester::#FB4] [test-3.lox] [0mprint baz;
[33m[tester::#FB4] [test-3.lox] [0mprint bar;
[33m[tester::#FB4] [test-3.lox] [0mprint hello;
[33m[tester::#FB4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0minner baz
[33m[your_program] [0mouter bar
[33m[your_program] [0mglobal hello
[33m[your_program] [0mouter baz
[33m[your_program] [0mouter bar
[33m[your_program] [0mglobal hello
[33m[your_program] [0mglobal baz
[33m[your_program] [0mglobal bar
[33m[your_program] [0mglobal hello
[33m[tester::#FB4] [test-3] [0m[92m✓ 9 line(s) match on stdout[0m
[33m[tester::#FB4] [test-3] [0m[92m✓ Received exit code 0.[0m
[33m[tester::#FB4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#FB4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FB4] [test-4.lox] [0m[33m// Variables declared in an outer scope should be[0m
[33m[tester::#FB4] [test-4.lox] [0m[33m// accessible inside inner scopes, but not the[0m
[33m[tester::#FB4] [test-4.lox] [0m[33m// other way around[0m
[33m[tester::#FB4] [test-4.lox] [0m{
[33m[tester::#FB4] [test-4.lox] [0m  var foo = "outer foo";
[33m[tester::#FB4] [test-4.lox] [0m  var baz = "outer baz";
[33m[tester::#FB4] [test-4.lox] [0m  {
[33m[tester::#FB4] [test-4.lox] [0m    foo = "modified foo";
[33m[tester::#FB4] [test-4.lox] [0m    var baz = "inner baz";
[33m[tester::#FB4] [test-4.lox] [0m    print foo;
[33m[tester::#FB4] [test-4.lox] [0m    print baz;
[33m[tester::#FB4] [test-4.lox] [0m  }
[33m[tester::#FB4] [test-4.lox] [0m  print foo;
[33m[tester::#FB4] [test-4.lox] [0m  print baz;
[33m[tester::#FB4] [test-4.lox] [0m}
[33m[tester::#FB4] [test-4.lox] [0mprint foo;
[33m[tester::#FB4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mmodified foo
[33m[your_program] [0minner baz
[33m[your_program] [0mmodified foo
[33m[your_program] [0mouter baz
[33m[your_program] [0mUndefined variable 'foo'.
[33m[your_program] [0m[line 16]
[33m[tester::#FB4] [test-4] [0m[92m✓ 4 line(s) match on stdout[0m
[33m[tester::#FB4] [test-4] [0m[92m✓ Received exit code 70.[0m
[33m[tester::#FB4] [0m[92mTest passed.[0m
