Debug = true

[33m[tester::#NE3] [0m[94mRunning tests for Stage #NE3 (ne3)[0m
[33m[tester::#NE3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#NE3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#NE3] [test-1.lox] [0m[33m// This should print the string if the condition[0m
[33m[tester::#NE3] [test-1.lox] [0m[33m// evaluates to True[0m
[33m[tester::#NE3] [test-1.lox] [0mif (false) print "foo";
[33m[tester::#NE3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[tester::#NE3] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#NE3] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#NE3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#NE3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#NE3] [test-2.lox] [0m[33m// This should print "block body" if the condition[0m
[33m[tester::#NE3] [test-2.lox] [0m[33m// evaluates to True[0m
[33m[tester::#NE3] [test-2.lox] [0mif (false) {
[33m[tester::#NE3] [test-2.lox] [0m  print "block body";
[33m[tester::#NE3] [test-2.lox] [0m}
[33m[tester::#NE3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[tester::#NE3] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#NE3] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#NE3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#NE3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// This program tests whether the assignment[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// operation returns the value assigned.[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// The if condition should evaluate to true and[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// the inner boolean expression must be printed.[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m// So, in this case the if condition evaluates to[0m
[33m[tester::#NE3] [test-3.lox] [0m[33m//true and prints the inner boolean expression[0m
[33m[tester::#NE3] [test-3.lox] [0mvar a = false;
[33m[tester::#NE3] [test-3.lox] [0mif (a = true) {
[33m[tester::#NE3] [test-3.lox] [0m  print (a == true);
[33m[tester::#NE3] [test-3.lox] [0m}
[33m[tester::#NE3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mtrue
[33m[tester::#NE3] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#NE3] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#NE3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#NE3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#NE3] [test-4.lox] [0m[33m// This program should print a different string[0m
[33m[tester::#NE3] [test-4.lox] [0m[33m// based on the value of age[0m
[33m[tester::#NE3] [test-4.lox] [0mvar stage = "unknown";
[33m[tester::#NE3] [test-4.lox] [0mvar age = 73;
[33m[tester::#NE3] [test-4.lox] [0mif (age < 18) { stage = "child"; }
[33m[tester::#NE3] [test-4.lox] [0mif (age >= 18) { stage = "adult"; }
[33m[tester::#NE3] [test-4.lox] [0mprint stage;
[33m[tester::#NE3] [test-4.lox] [0m
[33m[tester::#NE3] [test-4.lox] [0mvar isAdult = age >= 18;
[33m[tester::#NE3] [test-4.lox] [0mif (isAdult) { print "eligible for voting"; }
[33m[tester::#NE3] [test-4.lox] [0mif (!isAdult) { print "not eligible for voting"; }
[33m[tester::#NE3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0madult
[33m[your_program] [0meligible for voting
[33m[tester::#NE3] [test-4] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[tester::#NE3] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#NE3] [0m[92mTest passed.[0m

[33m[tester::#ST5] [0m[94mRunning tests for Stage #ST5 (st5)[0m
[33m[tester::#ST5] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#ST5] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ST5] [test-1.lox] [0m[33m// This program uses a random boolean to decide[0m
[33m[tester::#ST5] [test-1.lox] [0m[33m// which branch to execute,[0m
[33m[tester::#ST5] [test-1.lox] [0m[33m// and then prints the appropriate string[0m
[33m[tester::#ST5] [test-1.lox] [0mif (true) print "if"; else print "else";
[33m[tester::#ST5] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mif
[33m[tester::#ST5] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#ST5] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#ST5] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#ST5] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ST5] [test-2.lox] [0m[33m// This program initializes age with a random[0m
[33m[tester::#ST5] [test-2.lox] [0m[33m// integer and then prints "adult"[0m
[33m[tester::#ST5] [test-2.lox] [0m[33m// if the age is greater than 18, otherwise it[0m
[33m[tester::#ST5] [test-2.lox] [0m[33m// prints "child"[0m
[33m[tester::#ST5] [test-2.lox] [0mvar age = 64;
[33m[tester::#ST5] [test-2.lox] [0mif (age > 18) print "adult"; else print "child";
[33m[tester::#ST5] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0madult
[33m[tester::#ST5] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#ST5] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#ST5] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#ST5] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ST5] [test-3.lox] [0m[33m// This program uses a random boolean to decide[0m
[33m[tester::#ST5] [test-3.lox] [0m[33m// which branch to execute,[0m
[33m[tester::#ST5] [test-3.lox] [0m[33m// and then prints the appropriate string[0m
[33m[tester::#ST5] [test-3.lox] [0mif (false) {
[33m[tester::#ST5] [test-3.lox] [0m  print "if block";
[33m[tester::#ST5] [test-3.lox] [0m} else print "else statement";
[33m[tester::#ST5] [test-3.lox] [0m
[33m[tester::#ST5] [test-3.lox] [0mif (false) print "if statement"; else {
[33m[tester::#ST5] [test-3.lox] [0m  print "else block";
[33m[tester::#ST5] [test-3.lox] [0m}
[33m[tester::#ST5] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0melse statement
[33m[your_program] [0melse block
[33m[tester::#ST5] [test-3] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[tester::#ST5] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#ST5] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#ST5] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#ST5] [test-4.lox] [0m[33m// This program converts a random integer from[0m
[33m[tester::#ST5] [test-4.lox] [0m[33m// Celsius to Fahrenheit[0m
[33m[tester::#ST5] [test-4.lox] [0m[33m// and prints the result. It also prints a message[0m
[33m[tester::#ST5] [test-4.lox] [0m[33m// based on the temperature.[0m
[33m[tester::#ST5] [test-4.lox] [0mvar celsius = 82;
[33m[tester::#ST5] [test-4.lox] [0mvar fahrenheit = 0;
[33m[tester::#ST5] [test-4.lox] [0mvar isHot = false;
[33m[tester::#ST5] [test-4.lox] [0m
[33m[tester::#ST5] [test-4.lox] [0m{
[33m[tester::#ST5] [test-4.lox] [0m  fahrenheit = celsius * 9 / 5 + 32;
[33m[tester::#ST5] [test-4.lox] [0m  print celsius; print fahrenheit;
[33m[tester::#ST5] [test-4.lox] [0m
[33m[tester::#ST5] [test-4.lox] [0m  if (celsius > 30) {
[33m[tester::#ST5] [test-4.lox] [0m    isHot = true;
[33m[tester::#ST5] [test-4.lox] [0m    print "It's a hot day. Stay hydrated!";
[33m[tester::#ST5] [test-4.lox] [0m  } else {
[33m[tester::#ST5] [test-4.lox] [0m    print "It's cold today. Wear a jacket!";
[33m[tester::#ST5] [test-4.lox] [0m  }
[33m[tester::#ST5] [test-4.lox] [0m
[33m[tester::#ST5] [test-4.lox] [0m  if (isHot) { print "Use sunscreen!"; }
[33m[tester::#ST5] [test-4.lox] [0m}
[33m[tester::#ST5] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m82
[33m[your_program] [0m179.6
[33m[your_program] [0mIt's a hot day. Stay hydrated!
[33m[your_program] [0mUse sunscreen!
[33m[tester::#ST5] [test-4] [0m[92mâœ“ 4 line(s) match on stdout[0m
[33m[tester::#ST5] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#ST5] [0m[92mTest passed.[0m

[33m[tester::#FH8] [0m[94mRunning tests for Stage #FH8 (fh8)[0m
[33m[tester::#FH8] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#FH8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FH8] [test-1.lox] [0m[33m// This program uses a random boolean to decide[0m
[33m[tester::#FH8] [test-1.lox] [0m[33m// which branch to execute,[0m
[33m[tester::#FH8] [test-1.lox] [0m[33m// and then prints the appropriate string[0m
[33m[tester::#FH8] [test-1.lox] [0mif (false) print "if branch";
[33m[tester::#FH8] [test-1.lox] [0melse if (false) print "else-if branch";
[33m[tester::#FH8] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[tester::#FH8] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#FH8] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#FH8] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#FH8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FH8] [test-2.lox] [0m[33m// This program uses a random boolean to decide[0m
[33m[tester::#FH8] [test-2.lox] [0m[33m// which branch to execute,[0m
[33m[tester::#FH8] [test-2.lox] [0m[33m// and then prints the appropriate string[0m
[33m[tester::#FH8] [test-2.lox] [0mif (false) {
[33m[tester::#FH8] [test-2.lox] [0m  print "bar";
[33m[tester::#FH8] [test-2.lox] [0m} else if (false) print "bar";
[33m[tester::#FH8] [test-2.lox] [0m
[33m[tester::#FH8] [test-2.lox] [0mif (false) print "bar"; else if (false) {
[33m[tester::#FH8] [test-2.lox] [0m  print "bar";
[33m[tester::#FH8] [test-2.lox] [0m}
[33m[tester::#FH8] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[tester::#FH8] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#FH8] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#FH8] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#FH8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FH8] [test-3.lox] [0m[33m// This program uses multiple if statements to[0m
[33m[tester::#FH8] [test-3.lox] [0m[33m// categorize a person[0m
[33m[tester::#FH8] [test-3.lox] [0m[33m// into different life stages based on their age[0m
[33m[tester::#FH8] [test-3.lox] [0mvar age = 62;
[33m[tester::#FH8] [test-3.lox] [0mvar stage = "unknown";
[33m[tester::#FH8] [test-3.lox] [0mif (age < 18) { stage = "child"; }
[33m[tester::#FH8] [test-3.lox] [0melse if (age >= 18) { stage = "adult"; }
[33m[tester::#FH8] [test-3.lox] [0melse if (age >= 65) { stage = "senior"; }
[33m[tester::#FH8] [test-3.lox] [0melse if (age >= 100) { stage = "centenarian"; }
[33m[tester::#FH8] [test-3.lox] [0mprint stage;
[33m[tester::#FH8] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0madult
[33m[tester::#FH8] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#FH8] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#FH8] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#FH8] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#FH8] [test-4.lox] [0m[33m// This program uses multiple if statements to[0m
[33m[tester::#FH8] [test-4.lox] [0m[33m// determine eligibility for[0m
[33m[tester::#FH8] [test-4.lox] [0m[33m// voting, driving, and drinking based on a random[0m
[33m[tester::#FH8] [test-4.lox] [0m[33m// integer age[0m
[33m[tester::#FH8] [test-4.lox] [0mvar age = 79;
[33m[tester::#FH8] [test-4.lox] [0m
[33m[tester::#FH8] [test-4.lox] [0mvar isAdult = age >= 18;
[33m[tester::#FH8] [test-4.lox] [0mif (isAdult) { print "eligible for voting: true"; }
[33m[tester::#FH8] [test-4.lox] [0melse { print "eligible for voting: false"; }
[33m[tester::#FH8] [test-4.lox] [0m
[33m[tester::#FH8] [test-4.lox] [0mif (age < 16) { print "not eligible for driving"; }
[33m[tester::#FH8] [test-4.lox] [0melse if (age < 18) { print "learner's permit"; }
[33m[tester::#FH8] [test-4.lox] [0melse { print "eligible for driving"; }
[33m[tester::#FH8] [test-4.lox] [0m
[33m[tester::#FH8] [test-4.lox] [0mif (age >= 21) { print "eligible for drinking"; }
[33m[tester::#FH8] [test-4.lox] [0melse { print "not eligible for drinking"; }
[33m[tester::#FH8] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0meligible for voting: true
[33m[your_program] [0meligible for driving
[33m[your_program] [0meligible for drinking
[33m[tester::#FH8] [test-4] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[tester::#FH8] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#FH8] [0m[92mTest passed.[0m

[33m[tester::#XJ4] [0m[94mRunning tests for Stage #XJ4 (xj4)[0m
[33m[tester::#XJ4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#XJ4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XJ4] [test-1.lox] [0m[33m// This program uses nested if statements to print[0m
[33m[tester::#XJ4] [test-1.lox] [0m[33m// a message[0m
[33m[tester::#XJ4] [test-1.lox] [0mif (true) if (true) print "nested true";
[33m[tester::#XJ4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mnested true
[33m[tester::#XJ4] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#XJ4] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#XJ4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#XJ4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XJ4] [test-2.lox] [0m[33m// This program uses nested if statements to print[0m
[33m[tester::#XJ4] [test-2.lox] [0m[33m// a message[0m
[33m[tester::#XJ4] [test-2.lox] [0mif (true) {
[33m[tester::#XJ4] [test-2.lox] [0m  if (true) print "baz"; else print "baz";
[33m[tester::#XJ4] [test-2.lox] [0m}
[33m[tester::#XJ4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbaz
[33m[tester::#XJ4] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#XJ4] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#XJ4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#XJ4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XJ4] [test-3.lox] [0m[33m// This program categorizes a person into[0m
[33m[tester::#XJ4] [test-3.lox] [0m[33m// different life stages based on their age[0m
[33m[tester::#XJ4] [test-3.lox] [0m[33m// Then based on the age, it prints a message[0m
[33m[tester::#XJ4] [test-3.lox] [0m[33m// about the person's eligibility for voting,[0m
[33m[tester::#XJ4] [test-3.lox] [0m[33m// driving, and drinking[0m
[33m[tester::#XJ4] [test-3.lox] [0mvar stage = "unknown";
[33m[tester::#XJ4] [test-3.lox] [0mvar age = 68;
[33m[tester::#XJ4] [test-3.lox] [0mif (age < 18) {
[33m[tester::#XJ4] [test-3.lox] [0m    if (age < 13) { stage = "child"; }
[33m[tester::#XJ4] [test-3.lox] [0m    else if (age < 16) {
[33m[tester::#XJ4] [test-3.lox] [0m        stage = "young teenager";
[33m[tester::#XJ4] [test-3.lox] [0m    }
[33m[tester::#XJ4] [test-3.lox] [0m    else { stage = "teenager"; }
[33m[tester::#XJ4] [test-3.lox] [0m}
[33m[tester::#XJ4] [test-3.lox] [0melse if (age < 65) {
[33m[tester::#XJ4] [test-3.lox] [0m    if (age < 30) { stage = "young adult"; }
[33m[tester::#XJ4] [test-3.lox] [0m    else if (age < 50) { stage = "adult"; }
[33m[tester::#XJ4] [test-3.lox] [0m    else { stage = "middle-aged adult"; }
[33m[tester::#XJ4] [test-3.lox] [0m}
[33m[tester::#XJ4] [test-3.lox] [0melse { stage = "senior"; }
[33m[tester::#XJ4] [test-3.lox] [0mprint stage;
[33m[tester::#XJ4] [test-3.lox] [0m
[33m[tester::#XJ4] [test-3.lox] [0mvar isAdult = age >= 18;
[33m[tester::#XJ4] [test-3.lox] [0mif (isAdult) {
[33m[tester::#XJ4] [test-3.lox] [0m    print "eligible for voting: true";
[33m[tester::#XJ4] [test-3.lox] [0m    if (age < 25) {
[33m[tester::#XJ4] [test-3.lox] [0m        print "first-time voter: likely";
[33m[tester::#XJ4] [test-3.lox] [0m    }
[33m[tester::#XJ4] [test-3.lox] [0m    else { print "first-time voter: unlikely"; }
[33m[tester::#XJ4] [test-3.lox] [0m}
[33m[tester::#XJ4] [test-3.lox] [0melse { print "eligible for voting: false"; }
[33m[tester::#XJ4] [test-3.lox] [0m
[33m[tester::#XJ4] [test-3.lox] [0mif (age < 16) { print "not eligible for driving"; }
[33m[tester::#XJ4] [test-3.lox] [0melse if (age < 18) {
[33m[tester::#XJ4] [test-3.lox] [0m    print "eligible for driving: learner's permit";
[33m[tester::#XJ4] [test-3.lox] [0m    if (age < 17) {
[33m[tester::#XJ4] [test-3.lox] [0m        print "supervised driving required";
[33m[tester::#XJ4] [test-3.lox] [0m    }
[33m[tester::#XJ4] [test-3.lox] [0m    else {
[33m[tester::#XJ4] [test-3.lox] [0m        print "driving allowed with restrictions";
[33m[tester::#XJ4] [test-3.lox] [0m    }
[33m[tester::#XJ4] [test-3.lox] [0m}
[33m[tester::#XJ4] [test-3.lox] [0melse { print "eligible for driving"; }
[33m[tester::#XJ4] [test-3.lox] [0m
[33m[tester::#XJ4] [test-3.lox] [0mif (age < 21) {
[33m[tester::#XJ4] [test-3.lox] [0m    print "not eligible for drinking";
[33m[tester::#XJ4] [test-3.lox] [0m}
[33m[tester::#XJ4] [test-3.lox] [0melse {
[33m[tester::#XJ4] [test-3.lox] [0m    print "eligible for drinking";
[33m[tester::#XJ4] [test-3.lox] [0m    if (age < 25) {
[33m[tester::#XJ4] [test-3.lox] [0m        print "remember: drink responsibly!";
[33m[tester::#XJ4] [test-3.lox] [0m    }
[33m[tester::#XJ4] [test-3.lox] [0m}
[33m[tester::#XJ4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0msenior
[33m[your_program] [0meligible for voting: true
[33m[your_program] [0mfirst-time voter: unlikely
[33m[your_program] [0meligible for driving
[33m[your_program] [0meligible for drinking
[33m[tester::#XJ4] [test-3] [0m[92mâœ“ 5 line(s) match on stdout[0m
[33m[tester::#XJ4] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#XJ4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#XJ4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#XJ4] [test-4.lox] [0m[33m// This program uses nested if statements to print[0m
[33m[tester::#XJ4] [test-4.lox] [0m[33m// a message[0m
[33m[tester::#XJ4] [test-4.lox] [0mif (true) if (false) print "bar";
[33m[tester::#XJ4] [test-4.lox] [0melse print "foo";
[33m[tester::#XJ4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfoo
[33m[tester::#XJ4] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#XJ4] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#XJ4] [0m[92mTest passed.[0m

[33m[tester::#WK8] [0m[94mRunning tests for Stage #WK8 (wk8)[0m
[33m[tester::#WK8] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#WK8] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WK8] [test-1.lox] [0m[33m// The logical OR operator should return the first[0m
[33m[tester::#WK8] [test-1.lox] [0m[33m// value that is truthy[0m
[33m[tester::#WK8] [test-1.lox] [0mif (false or "ok") print "world";
[33m[tester::#WK8] [test-1.lox] [0mif (nil or "ok") print "world";
[33m[tester::#WK8] [test-1.lox] [0m
[33m[tester::#WK8] [test-1.lox] [0mif (false or false) print "bar";
[33m[tester::#WK8] [test-1.lox] [0mif (true or "bar") print "bar";
[33m[tester::#WK8] [test-1.lox] [0m
[33m[tester::#WK8] [test-1.lox] [0mif (67 or "hello") print "hello";
[33m[tester::#WK8] [test-1.lox] [0mif ("hello" or "hello") print "hello";
[33m[tester::#WK8] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mworld
[33m[your_program] [0mworld
[33m[your_program] [0mbar
[33m[your_program] [0mhello
[33m[your_program] [0mhello
[33m[tester::#WK8] [test-1] [0m[92mâœ“ 5 line(s) match on stdout[0m
[33m[tester::#WK8] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#WK8] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#WK8] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WK8] [test-2.lox] [0m[33m// This program uses the logical OR operator to[0m
[33m[tester::#WK8] [test-2.lox] [0m[33m// print the first value that is truthy[0m
[33m[tester::#WK8] [test-2.lox] [0mprint 16 or true;
[33m[tester::#WK8] [test-2.lox] [0mprint false or 16;
[33m[tester::#WK8] [test-2.lox] [0mprint false or false or true;
[33m[tester::#WK8] [test-2.lox] [0m
[33m[tester::#WK8] [test-2.lox] [0mprint false or false;
[33m[tester::#WK8] [test-2.lox] [0mprint false or false or false;
[33m[tester::#WK8] [test-2.lox] [0mprint false or false or false or false;
[33m[tester::#WK8] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m16
[33m[your_program] [0m16
[33m[your_program] [0mtrue
[33m[your_program] [0mfalse
[33m[your_program] [0mfalse
[33m[your_program] [0mfalse
[33m[tester::#WK8] [test-2] [0m[92mâœ“ 6 line(s) match on stdout[0m
[33m[tester::#WK8] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#WK8] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#WK8] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WK8] [test-3.lox] [0m[33m// This program relies on the fact that[0m
[33m[tester::#WK8] [test-3.lox] [0m[33m// assignments return the assigned value[0m
[33m[tester::#WK8] [test-3.lox] [0m[33m// And that the logical OR operator short-circuits[0m
[33m[tester::#WK8] [test-3.lox] [0m[33m// So, if the first assignment is truthy, it[0m
[33m[tester::#WK8] [test-3.lox] [0m[33m// wouldn't proceed to the subsequent assignments[0m
[33m[tester::#WK8] [test-3.lox] [0m[33m// And then prints the assigned values[0m
[33m[tester::#WK8] [test-3.lox] [0mvar a = "hello";
[33m[tester::#WK8] [test-3.lox] [0mvar b = "hello";
[33m[tester::#WK8] [test-3.lox] [0m(a = false) or (b = true) or (a = "hello");
[33m[tester::#WK8] [test-3.lox] [0mprint a;
[33m[tester::#WK8] [test-3.lox] [0mprint b;
[33m[tester::#WK8] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[your_program] [0mtrue
[33m[tester::#WK8] [test-3] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[tester::#WK8] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#WK8] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#WK8] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#WK8] [test-4.lox] [0m[33m// This program uses if conditions to get the stage[0m
[33m[tester::#WK8] [test-4.lox] [0m[33m// of a person's life based on their age, and then[0m
[33m[tester::#WK8] [test-4.lox] [0m[33m// prints if they are eligible for voting[0m
[33m[tester::#WK8] [test-4.lox] [0mvar stage = "unknown";
[33m[tester::#WK8] [test-4.lox] [0mvar age = 79;
[33m[tester::#WK8] [test-4.lox] [0mif (age < 18) { stage = "child"; }
[33m[tester::#WK8] [test-4.lox] [0mif (age >= 18) { stage = "adult"; }
[33m[tester::#WK8] [test-4.lox] [0mprint stage;
[33m[tester::#WK8] [test-4.lox] [0m
[33m[tester::#WK8] [test-4.lox] [0mvar isAdult = age >= 18;
[33m[tester::#WK8] [test-4.lox] [0mif (isAdult) { print "eligible for voting"; }
[33m[tester::#WK8] [test-4.lox] [0mif (!isAdult) { print "not eligible for voting"; }
[33m[tester::#WK8] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0madult
[33m[your_program] [0meligible for voting
[33m[tester::#WK8] [test-4] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[tester::#WK8] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#WK8] [0m[92mTest passed.[0m

[33m[tester::#JX4] [0m[94mRunning tests for Stage #JX4 (jx4)[0m
[33m[tester::#JX4] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#JX4] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JX4] [test-1.lox] [0m[33m// The logical AND operator should return the[0m
[33m[tester::#JX4] [test-1.lox] [0m[33m// first falsy value[0m
[33m[tester::#JX4] [test-1.lox] [0mif (false and "bad") print "hello";
[33m[tester::#JX4] [test-1.lox] [0mif (nil and "bad") print "hello";
[33m[tester::#JX4] [test-1.lox] [0m
[33m[tester::#JX4] [test-1.lox] [0m[33m// If all values are truthy, it returns the last[0m
[33m[tester::#JX4] [test-1.lox] [0m[33m// value[0m
[33m[tester::#JX4] [test-1.lox] [0mif (true and "baz") print "baz";
[33m[tester::#JX4] [test-1.lox] [0mif (77 and "quz") print "quz";
[33m[tester::#JX4] [test-1.lox] [0mif ("quz" and "quz") print "quz";
[33m[tester::#JX4] [test-1.lox] [0mif ("" and "world") print "world";
[33m[tester::#JX4] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mbaz
[33m[your_program] [0mquz
[33m[your_program] [0mquz
[33m[your_program] [0mworld
[33m[tester::#JX4] [test-1] [0m[92mâœ“ 4 line(s) match on stdout[0m
[33m[tester::#JX4] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#JX4] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#JX4] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JX4] [test-2.lox] [0m[33m// This program uses the logical AND operator to[0m
[33m[tester::#JX4] [test-2.lox] [0m[33m// print the first falsy value[0m
[33m[tester::#JX4] [test-2.lox] [0m[33m// Or the last value if all values are truthy[0m
[33m[tester::#JX4] [test-2.lox] [0mprint false and 1;
[33m[tester::#JX4] [test-2.lox] [0mprint true and 1;
[33m[tester::#JX4] [test-2.lox] [0mprint 59 and "quz" and false;
[33m[tester::#JX4] [test-2.lox] [0m
[33m[tester::#JX4] [test-2.lox] [0mprint 59 and true;
[33m[tester::#JX4] [test-2.lox] [0mprint 59 and "quz" and 59;
[33m[tester::#JX4] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mfalse
[33m[your_program] [0m1
[33m[your_program] [0mfalse
[33m[your_program] [0mtrue
[33m[your_program] [0m59
[33m[tester::#JX4] [test-2] [0m[92mâœ“ 5 line(s) match on stdout[0m
[33m[tester::#JX4] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#JX4] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#JX4] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JX4] [test-3.lox] [0m[33m// This program relies on the fact that[0m
[33m[tester::#JX4] [test-3.lox] [0m[33m// assignments return the assigned value[0m
[33m[tester::#JX4] [test-3.lox] [0m[33m// And that the logical AND operator short-circuits[0m
[33m[tester::#JX4] [test-3.lox] [0m[33m// So, when it encounters a falsy value, it[0m
[33m[tester::#JX4] [test-3.lox] [0m[33m// wouldn't proceed to the subsequent assignments[0m
[33m[tester::#JX4] [test-3.lox] [0m[33m// And then prints the assigned values[0m
[33m[tester::#JX4] [test-3.lox] [0mvar a = "bar";
[33m[tester::#JX4] [test-3.lox] [0mvar b = "bar";
[33m[tester::#JX4] [test-3.lox] [0m(a = true) and (b = false) and (a = "bad");
[33m[tester::#JX4] [test-3.lox] [0mprint a;
[33m[tester::#JX4] [test-3.lox] [0mprint b;
[33m[tester::#JX4] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mtrue
[33m[your_program] [0mfalse
[33m[tester::#JX4] [test-3] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[tester::#JX4] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#JX4] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#JX4] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#JX4] [test-4.lox] [0m[33m// This program uses if conditions to get the stage[0m
[33m[tester::#JX4] [test-4.lox] [0m[33m// of a person's life based on their age, and then[0m
[33m[tester::#JX4] [test-4.lox] [0m[33m// prints if they are eligible for voting[0m
[33m[tester::#JX4] [test-4.lox] [0mvar stage = "unknown";
[33m[tester::#JX4] [test-4.lox] [0mvar age = 62;
[33m[tester::#JX4] [test-4.lox] [0mif (age < 18) { stage = "child"; }
[33m[tester::#JX4] [test-4.lox] [0mif (age >= 18) { stage = "adult"; }
[33m[tester::#JX4] [test-4.lox] [0mprint stage;
[33m[tester::#JX4] [test-4.lox] [0m
[33m[tester::#JX4] [test-4.lox] [0mvar isAdult = age >= 18;
[33m[tester::#JX4] [test-4.lox] [0mif (isAdult) { print "eligible for voting"; }
[33m[tester::#JX4] [test-4.lox] [0mif (!isAdult) { print "not eligible for voting"; }
[33m[tester::#JX4] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0madult
[33m[your_program] [0meligible for voting
[33m[tester::#JX4] [test-4] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[tester::#JX4] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#JX4] [0m[92mTest passed.[0m

[33m[tester::#QY3] [0m[94mRunning tests for Stage #QY3 (qy3)[0m
[33m[tester::#QY3] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#QY3] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#QY3] [test-1.lox] [0m[33m// This program uses a while loop to print the[0m
[33m[tester::#QY3] [test-1.lox] [0m[33m// numbers from 0 to N[0m
[33m[tester::#QY3] [test-1.lox] [0m[33m// The assignment operation returns the assigned[0m
[33m[tester::#QY3] [test-1.lox] [0m[33m// value[0m
[33m[tester::#QY3] [test-1.lox] [0mvar baz = 0;
[33m[tester::#QY3] [test-1.lox] [0mwhile (baz < 3) print baz = baz + 1;
[33m[tester::#QY3] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[your_program] [0m3
[33m[tester::#QY3] [test-1] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[tester::#QY3] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#QY3] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#QY3] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#QY3] [test-2.lox] [0m[33m// This program uses a while loop to print the[0m
[33m[tester::#QY3] [test-2.lox] [0m[33m// numbers from 0 to 3[0m
[33m[tester::#QY3] [test-2.lox] [0m[33m// The statement inside the block is executed[0m
[33m[tester::#QY3] [test-2.lox] [0m[33m// every time the loop condition is true[0m
[33m[tester::#QY3] [test-2.lox] [0mvar baz = 0;
[33m[tester::#QY3] [test-2.lox] [0mwhile (baz < 3) {
[33m[tester::#QY3] [test-2.lox] [0m  print baz;
[33m[tester::#QY3] [test-2.lox] [0m  baz = baz + 1;
[33m[tester::#QY3] [test-2.lox] [0m}
[33m[tester::#QY3] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m0
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[tester::#QY3] [test-2] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[tester::#QY3] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#QY3] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#QY3] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#QY3] [test-3.lox] [0m[33m// This program uses a while loop to calculate the[0m
[33m[tester::#QY3] [test-3.lox] [0m[33m// factorial of 5[0m
[33m[tester::#QY3] [test-3.lox] [0m[33m// The first while loop never runs because the[0m
[33m[tester::#QY3] [test-3.lox] [0m[33m// condition is false[0m
[33m[tester::#QY3] [test-3.lox] [0mwhile (false) { print "should not print"; }
[33m[tester::#QY3] [test-3.lox] [0m
[33m[tester::#QY3] [test-3.lox] [0mvar product = 1;
[33m[tester::#QY3] [test-3.lox] [0mvar i = 1;
[33m[tester::#QY3] [test-3.lox] [0m
[33m[tester::#QY3] [test-3.lox] [0mwhile (i <= 5) {
[33m[tester::#QY3] [test-3.lox] [0m  product = product * i;
[33m[tester::#QY3] [test-3.lox] [0m  i = i + 1;
[33m[tester::#QY3] [test-3.lox] [0m}
[33m[tester::#QY3] [test-3.lox] [0m
[33m[tester::#QY3] [test-3.lox] [0mprint "Factorial of 5: "; print product;
[33m[tester::#QY3] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0mFactorial of 5: 
[33m[your_program] [0m120
[33m[tester::#QY3] [test-3] [0m[92mâœ“ 2 line(s) match on stdout[0m
[33m[tester::#QY3] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#QY3] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#QY3] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#QY3] [test-4.lox] [0m[33m// This program uses a while loop to generate and[0m
[33m[tester::#QY3] [test-4.lox] [0m[33m// print the first N Fibonacci numbers[0m
[33m[tester::#QY3] [test-4.lox] [0mvar n = 10;
[33m[tester::#QY3] [test-4.lox] [0mvar fm = 0;
[33m[tester::#QY3] [test-4.lox] [0mvar fn = 1;
[33m[tester::#QY3] [test-4.lox] [0mvar index = 0;
[33m[tester::#QY3] [test-4.lox] [0m
[33m[tester::#QY3] [test-4.lox] [0mwhile (index < n) {
[33m[tester::#QY3] [test-4.lox] [0m    print fm;
[33m[tester::#QY3] [test-4.lox] [0m    var temp = fm;
[33m[tester::#QY3] [test-4.lox] [0m    fm = fn;
[33m[tester::#QY3] [test-4.lox] [0m    fn = temp + fn;
[33m[tester::#QY3] [test-4.lox] [0m    index = index + 1;
[33m[tester::#QY3] [test-4.lox] [0m}
[33m[tester::#QY3] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m0
[33m[your_program] [0m1
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[your_program] [0m3
[33m[your_program] [0m5
[33m[your_program] [0m8
[33m[your_program] [0m13
[33m[your_program] [0m21
[33m[your_program] [0m34
[33m[tester::#QY3] [test-4] [0m[92mâœ“ 10 line(s) match on stdout[0m
[33m[tester::#QY3] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#QY3] [0m[92mTest passed.[0m

[33m[tester::#BW6] [0m[94mRunning tests for Stage #BW6 (bw6)[0m
[33m[tester::#BW6] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#BW6] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BW6] [test-1.lox] [0m[33m// This program uses a for loop to print the[0m
[33m[tester::#BW6] [test-1.lox] [0m[33m// numbers from 0 to 3[0m
[33m[tester::#BW6] [test-1.lox] [0m[33m// The assignment operation returns the assigned[0m
[33m[tester::#BW6] [test-1.lox] [0m[33m// value[0m
[33m[tester::#BW6] [test-1.lox] [0mfor (var foo = 0; foo < 3;) print foo = foo + 1;
[33m[tester::#BW6] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[your_program] [0m3
[33m[tester::#BW6] [test-1] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[tester::#BW6] [test-1] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#BW6] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#BW6] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BW6] [test-2.lox] [0m[33m// This program uses a for loop to print the[0m
[33m[tester::#BW6] [test-2.lox] [0m[33m// numbers from 0 to 3[0m
[33m[tester::#BW6] [test-2.lox] [0mfor (var bar = 0; bar < 3; bar = bar + 1) {
[33m[tester::#BW6] [test-2.lox] [0m  print bar;
[33m[tester::#BW6] [test-2.lox] [0m}
[33m[tester::#BW6] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m0
[33m[your_program] [0m1
[33m[your_program] [0m2
[33m[tester::#BW6] [test-2] [0m[92mâœ“ 3 line(s) match on stdout[0m
[33m[tester::#BW6] [test-2] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#BW6] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#BW6] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BW6] [test-3.lox] [0m[33m// This program uses a for loop to print the[0m
[33m[tester::#BW6] [test-3.lox] [0m[33m// numbers from 0 to 2[0m
[33m[tester::#BW6] [test-3.lox] [0m[33m// The loop initializer is ignored in this loop[0m
[33m[tester::#BW6] [test-3.lox] [0mvar baz = 0;
[33m[tester::#BW6] [test-3.lox] [0mfor (; baz < 2; baz = baz + 1) print baz;
[33m[tester::#BW6] [test-3.lox] [0m
[33m[tester::#BW6] [test-3.lox] [0m[33m// This program uses a for loop to print the[0m
[33m[tester::#BW6] [test-3.lox] [0m[33m// numbers from 0 to 2[0m
[33m[tester::#BW6] [test-3.lox] [0m[33m// The loop increment clause is ignored in this[0m
[33m[tester::#BW6] [test-3.lox] [0m[33m// loop[0m
[33m[tester::#BW6] [test-3.lox] [0mfor (var bar = 0; bar < 2;) {
[33m[tester::#BW6] [test-3.lox] [0m  print bar;
[33m[tester::#BW6] [test-3.lox] [0m  bar = bar + 1;
[33m[tester::#BW6] [test-3.lox] [0m}
[33m[tester::#BW6] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m0
[33m[your_program] [0m1
[33m[your_program] [0m0
[33m[your_program] [0m1
[33m[tester::#BW6] [test-3] [0m[92mâœ“ 4 line(s) match on stdout[0m
[33m[tester::#BW6] [test-3] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#BW6] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#BW6] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#BW6] [test-4.lox] [0m[33m// This program uses for loops and block scopes[0m
[33m[tester::#BW6] [test-4.lox] [0m[33m// to print the updates to the same variable[0m
[33m[tester::#BW6] [test-4.lox] [0mvar baz = "after";
[33m[tester::#BW6] [test-4.lox] [0m{
[33m[tester::#BW6] [test-4.lox] [0m  var baz = "before";
[33m[tester::#BW6] [test-4.lox] [0m
[33m[tester::#BW6] [test-4.lox] [0m  for (var baz = 0; baz < 1; baz = baz + 1) {
[33m[tester::#BW6] [test-4.lox] [0m    print baz;
[33m[tester::#BW6] [test-4.lox] [0m    var baz = -1;
[33m[tester::#BW6] [test-4.lox] [0m    print baz;
[33m[tester::#BW6] [test-4.lox] [0m  }
[33m[tester::#BW6] [test-4.lox] [0m}
[33m[tester::#BW6] [test-4.lox] [0m
[33m[tester::#BW6] [test-4.lox] [0m{
[33m[tester::#BW6] [test-4.lox] [0m  for (var baz = 0; baz > 0; baz = baz + 1) {}
[33m[tester::#BW6] [test-4.lox] [0m
[33m[tester::#BW6] [test-4.lox] [0m  var baz = "after";
[33m[tester::#BW6] [test-4.lox] [0m  print baz;
[33m[tester::#BW6] [test-4.lox] [0m
[33m[tester::#BW6] [test-4.lox] [0m  for (baz = 0; baz < 1; baz = baz + 1) {
[33m[tester::#BW6] [test-4.lox] [0m    print baz;
[33m[tester::#BW6] [test-4.lox] [0m  }
[33m[tester::#BW6] [test-4.lox] [0m}
[33m[tester::#BW6] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m0
[33m[your_program] [0m-1
[33m[your_program] [0mafter
[33m[your_program] [0m0
[33m[tester::#BW6] [test-4] [0m[92mâœ“ 4 line(s) match on stdout[0m
[33m[tester::#BW6] [test-4] [0m[92mâœ“ Received exit code 0.[0m
[33m[tester::#BW6] [0m[92mTest passed.[0m

[33m[tester::#VT1] [0m[94mRunning tests for Stage #VT1 (vt1)[0m
[33m[tester::#VT1] [test-1] [0m[94mRunning test case: 1[0m
[33m[tester::#VT1] [test-1] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VT1] [test-1.lox] [0m[33m// This program would give a compile error[0m
[33m[tester::#VT1] [test-1.lox] [0m[33m// because the variable declaration is not[0m
[33m[tester::#VT1] [test-1.lox] [0m[33m// inside a block[0m
[33m[tester::#VT1] [test-1.lox] [0mfor (;;) var foo;
[33m[tester::#VT1] [test-1] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 4] Error at 'var': Expect expression.
[33m[tester::#VT1] [test-1] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#VT1] [test-1] [0m[92mâœ“ Received exit code 65.[0m
[33m[tester::#VT1] [test-2] [0m[94mRunning test case: 2[0m
[33m[tester::#VT1] [test-2] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VT1] [test-2.lox] [0m[33m// This program would give a compile error[0m
[33m[tester::#VT1] [test-2.lox] [0m[33m// because the condition is not valid[0m
[33m[tester::#VT1] [test-2.lox] [0mfor (var a = 1; {}; a = a + 1) {}
[33m[tester::#VT1] [test-2] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at '{': Expect expression.
[33m[your_program] [0m[line 3] Error at ')': Expect ';' after expression.
[33m[tester::#VT1] [test-2] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#VT1] [test-2] [0m[92mâœ“ Received exit code 65.[0m
[33m[tester::#VT1] [test-3] [0m[94mRunning test case: 3[0m
[33m[tester::#VT1] [test-3] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VT1] [test-3.lox] [0m[33m// This program would give a compile error[0m
[33m[tester::#VT1] [test-3.lox] [0m[33m// because the increment clause is not valid[0m
[33m[tester::#VT1] [test-3.lox] [0mfor (var a = 1; a < 2; {}) {}
[33m[tester::#VT1] [test-3] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at '{': Expect expression.
[33m[tester::#VT1] [test-3] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#VT1] [test-3] [0m[92mâœ“ Received exit code 65.[0m
[33m[tester::#VT1] [test-4] [0m[94mRunning test case: 4[0m
[33m[tester::#VT1] [test-4] [0m[94mWriting contents to ./test.lox:[0m
[33m[tester::#VT1] [test-4.lox] [0m[33m// This program would give a compile error[0m
[33m[tester::#VT1] [test-4.lox] [0m[33m// because the initialization clause is not valid[0m
[33m[tester::#VT1] [test-4.lox] [0mfor ({}; a < 2; a = a + 1) {}
[33m[tester::#VT1] [test-4] [0m[94m$ ./your_program.sh run test.lox[0m
[33m[your_program] [0m[line 3] Error at '{': Expect expression.
[33m[your_program] [0m[line 3] Error at ')': Expect ';' after expression.
[33m[tester::#VT1] [test-4] [0m[92mâœ“ 1 line(s) match on stdout[0m
[33m[tester::#VT1] [test-4] [0m[92mâœ“ Received exit code 65.[0m
[33m[tester::#VT1] [0m[92mTest passed.[0m
